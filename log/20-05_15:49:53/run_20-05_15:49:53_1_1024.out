run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m0.txt...

Read matrix has 24 rows and 8 columns.

Input arrays: A (24, 8), B (8, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.056633 ms

xsmm-reference Time (libxsmm): 0.056633 ms

xsmm-reference No. of CPU cycles: 56633

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.056633333333333334

xsmm-reference avg execution time: 0.056633333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 59787093 cleaned_data/example_mats/hex/p1/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m0.txt...

Read matrix has 24 rows and 8 columns.

Input arrays: A (24, 8), B (8, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 24, k= 8

lda= 1024, ldb= 8, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 24

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.047567 ms

xsmm-custom Time (libxsmm): 0.047567 ms

xsmm-custom No. of CPU cycles: 47566

CPU clock speed (GHz): 0.999986

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.047566666666666667

xsmm-custom avg execution time: 0.047566666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 8, 'a_nonzero': 48, 'a_rows': 24, 'a_size': 192, 'a_unique': 2, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/hex/p1/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1906096706377014, 'speedup_best_over_ref': 1.1906096706377014, 'xsmm_custom_avg': 0.04756666666666667, 'xsmm_custom_best': 0.04756666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.056633333333333334, 'xsmm_reference_best': 0.056633333333333334, 'xsmm_reference_cpu_freq': 0.999986, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m3.txt...

Read matrix has 8 rows and 24 columns.

Input arrays: A (8, 24), B (24, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.016533 ms

xsmm-reference Time (libxsmm): 0.016533 ms

xsmm-reference No. of CPU cycles: 16533

CPU clock speed (GHz): 0.999980

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.016533333333333334

xsmm-reference avg execution time: 0.016533333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2054641284 cleaned_data/example_mats/hex/p1/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m3.txt...

Read matrix has 8 rows and 24 columns.

Input arrays: A (8, 24), B (24, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 8, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 8

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.017300 ms

xsmm-custom Time (libxsmm): 0.017300 ms

xsmm-custom No. of CPU cycles: 17300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.017299999999999999

xsmm-custom avg execution time: 0.017299999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 48, 'a_rows': 8, 'a_size': 192, 'a_unique': 2, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/hex/p1/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9556840077071291, 'speedup_best_over_ref': 0.9556840077071291, 'xsmm_custom_avg': 0.0173, 'xsmm_custom_best': 0.0173, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.016533333333333334, 'xsmm_reference_best': 0.016533333333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m6.txt...

Read matrix has 24 rows and 24 columns.

Input arrays: A (24, 24), B (24, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.040467 ms

xsmm-reference Time (libxsmm): 0.040467 ms

xsmm-reference No. of CPU cycles: 40466

CPU clock speed (GHz): 0.999984

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.040466666666666665

xsmm-reference avg execution time: 0.040466666666666665

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1781048227 cleaned_data/example_mats/hex/p1/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m6.txt...

Read matrix has 24 rows and 24 columns.

Input arrays: A (24, 24), B (24, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 24, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 24

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.044133 ms

xsmm-custom Time (libxsmm): 0.044133 ms

xsmm-custom No. of CPU cycles: 44133

CPU clock speed (GHz): 0.999992

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.044133333333333337

xsmm-custom avg execution time: 0.044133333333333337

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 48, 'a_rows': 24, 'a_size': 576, 'a_unique': 2, 'alpha': 1.0, 'beta': 0.0, 'density': 0.08333333333333333, 'mat_file': 'data/example_mats/hex/p1/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.916918429003021, 'speedup_best_over_ref': 0.916918429003021, 'xsmm_custom_avg': 0.04413333333333334, 'xsmm_custom_best': 0.04413333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.040466666666666665, 'xsmm_reference_best': 0.040466666666666665, 'xsmm_reference_cpu_freq': 0.999992, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m132.txt...

Read matrix has 8 rows and 24 columns.

Input arrays: A (8, 24), B (24, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.012933 ms

xsmm-reference Time (libxsmm): 0.012933 ms

xsmm-reference No. of CPU cycles: 12933

CPU clock speed (GHz): 0.999974

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.012933333333333333

xsmm-reference avg execution time: 0.012933333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1057417175 cleaned_data/example_mats/hex/p1/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m132.txt...

Read matrix has 8 rows and 24 columns.

Input arrays: A (8, 24), B (24, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 8, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 8

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.014633 ms

xsmm-custom Time (libxsmm): 0.014633 ms

xsmm-custom No. of CPU cycles: 14633

CPU clock speed (GHz): 0.999977

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.014633333333333333

xsmm-custom avg execution time: 0.014633333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 48, 'a_rows': 8, 'a_size': 192, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/hex/p1/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8838268792710706, 'speedup_best_over_ref': 0.8838268792710706, 'xsmm_custom_avg': 0.014633333333333333, 'xsmm_custom_best': 0.014633333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.012933333333333333, 'xsmm_reference_best': 0.012933333333333333, 'xsmm_reference_cpu_freq': 0.999977, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m460.txt...

Read matrix has 24 rows and 8 columns.

Input arrays: A (24, 8), B (8, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.025400 ms

xsmm-reference Time (libxsmm): 0.025400 ms

xsmm-reference No. of CPU cycles: 25400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.025399999999999999

xsmm-reference avg execution time: 0.025399999999999999

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2128377621 cleaned_data/example_mats/hex/p1/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p1/gauss-legendre/m460.txt...

Read matrix has 24 rows and 8 columns.

Input arrays: A (24, 8), B (8, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 24, k= 8

lda= 1024, ldb= 8, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 24

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.026467 ms

xsmm-custom Time (libxsmm): 0.026467 ms

xsmm-custom No. of CPU cycles: 26466

CPU clock speed (GHz): 0.999975

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.02646666666666667

xsmm-custom avg execution time: 0.02646666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 8, 'a_nonzero': 48, 'a_rows': 24, 'a_size': 192, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/hex/p1/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.959697732997481, 'speedup_best_over_ref': 0.959697732997481, 'xsmm_custom_avg': 0.02646666666666667, 'xsmm_custom_best': 0.02646666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0254, 'xsmm_reference_best': 0.0254, 'xsmm_reference_cpu_freq': 0.999975, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m0.txt...

Read matrix has 54 rows and 27 columns.

Input arrays: A (54, 27), B (27, 1024).

Output array: C (54, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.127000 ms

xsmm-reference Time (libxsmm): 0.127000 ms

xsmm-reference No. of CPU cycles: 127000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.127

xsmm-reference avg execution time: 0.127

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 550648167 cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m0.txt...

Read matrix has 54 rows and 27 columns.

Input arrays: A (54, 27), B (27, 1024).

Output array: C (54, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 54, k= 27

lda= 1024, ldb= 27, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.138367 ms

xsmm-custom Time (libxsmm): 0.138367 ms

xsmm-custom No. of CPU cycles: 138366

CPU clock speed (GHz): 0.999995

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.13836666666666667

xsmm-custom avg execution time: 0.13836666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 27, 'a_nonzero': 54, 'a_rows': 54, 'a_size': 1458, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.037037037037037035, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9178511202119971, 'speedup_best_over_ref': 0.9178511202119971, 'xsmm_custom_avg': 0.13836666666666667, 'xsmm_custom_best': 0.13836666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.127, 'xsmm_reference_best': 0.127, 'xsmm_reference_cpu_freq': 0.999995, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m3.txt...

Read matrix has 27 rows and 54 columns.

Input arrays: A (27, 54), B (54, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.088933 ms

xsmm-reference Time (libxsmm): 0.088900 ms

xsmm-reference No. of CPU cycles: 88900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.088933333333333336

xsmm-reference avg execution time: 0.088933333333333336

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 114878401 cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m3.txt...

Read matrix has 27 rows and 54 columns.

Input arrays: A (27, 54), B (54, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 27, k= 54

lda= 1024, ldb= 54, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.093733 ms

xsmm-custom Time (libxsmm): 0.093733 ms

xsmm-custom No. of CPU cycles: 93733

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.093733333333333321

xsmm-custom avg execution time: 0.093733333333333321

Freeing A

Freeing B

Freeing C

{'a_cols': 54, 'a_nonzero': 162, 'a_rows': 27, 'a_size': 1458, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1111111111111111, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9487908961593173, 'speedup_best_over_ref': 0.9487908961593173, 'xsmm_custom_avg': 0.09373333333333332, 'xsmm_custom_best': 0.09373333333333332, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.08893333333333334, 'xsmm_reference_best': 0.08893333333333334, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m6.txt...

Read matrix has 81 rows and 54 columns.

Input arrays: A (81, 54), B (54, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.276900 ms

xsmm-reference Time (libxsmm): 0.276900 ms

xsmm-reference No. of CPU cycles: 276900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.27690000000000003

xsmm-reference avg execution time: 0.27690000000000003

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 647458479 cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m6.txt...

Read matrix has 81 rows and 54 columns.

Input arrays: A (81, 54), B (54, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 81, k= 54

lda= 1024, ldb= 54, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.269233 ms

xsmm-custom Time (libxsmm): 0.269200 ms

xsmm-custom No. of CPU cycles: 269200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.26923333333333332

xsmm-custom avg execution time: 0.26923333333333332

Freeing A

Freeing B

Freeing C

{'a_cols': 54, 'a_nonzero': 162, 'a_rows': 81, 'a_size': 4374, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.037037037037037035, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0284759192769595, 'speedup_best_over_ref': 1.0284759192769595, 'xsmm_custom_avg': 0.2692333333333333, 'xsmm_custom_best': 0.2692333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.27690000000000003, 'xsmm_reference_best': 0.27690000000000003, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m132.txt...

Read matrix has 27 rows and 81 columns.

Input arrays: A (27, 81), B (81, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.126000 ms

xsmm-reference Time (libxsmm): 0.126000 ms

xsmm-reference No. of CPU cycles: 126000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.126

xsmm-reference avg execution time: 0.126

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2124672786 cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m132.txt...

Read matrix has 27 rows and 81 columns.

Input arrays: A (27, 81), B (81, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 27, k= 81

lda= 1024, ldb= 81, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.127300 ms

xsmm-custom Time (libxsmm): 0.127300 ms

xsmm-custom No. of CPU cycles: 127300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.1273

xsmm-custom avg execution time: 0.1273

Freeing A

Freeing B

Freeing C

{'a_cols': 81, 'a_nonzero': 216, 'a_rows': 27, 'a_size': 2187, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.09876543209876543, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9897879025923016, 'speedup_best_over_ref': 0.9897879025923016, 'xsmm_custom_avg': 0.1273, 'xsmm_custom_best': 0.1273, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.126, 'xsmm_reference_best': 0.126, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m460.txt...

Read matrix has 81 rows and 27 columns.

Input arrays: A (81, 27), B (27, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.199800 ms

xsmm-reference Time (libxsmm): 0.199800 ms

xsmm-reference No. of CPU cycles: 199800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.19980000000000001

xsmm-reference avg execution time: 0.19980000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2075832832 cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre-lobatto/m460.txt...

Read matrix has 81 rows and 27 columns.

Input arrays: A (81, 27), B (27, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 81, k= 27

lda= 1024, ldb= 27, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.196867 ms

xsmm-custom Time (libxsmm): 0.196867 ms

xsmm-custom No. of CPU cycles: 196866

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.19686666666666666

xsmm-custom avg execution time: 0.19686666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 27, 'a_nonzero': 216, 'a_rows': 81, 'a_size': 2187, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.09876543209876543, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0149001015916017, 'speedup_best_over_ref': 1.0149001015916017, 'xsmm_custom_avg': 0.19686666666666666, 'xsmm_custom_best': 0.19686666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1998, 'xsmm_reference_best': 0.1998, 'xsmm_reference_cpu_freq': 0.999997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m0.txt...

Read matrix has 54 rows and 27 columns.

Input arrays: A (54, 27), B (27, 1024).

Output array: C (54, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.125200 ms

xsmm-reference Time (libxsmm): 0.125200 ms

xsmm-reference No. of CPU cycles: 125200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.12520000000000001

xsmm-reference avg execution time: 0.12520000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1834341703 cleaned_data/example_mats/hex/p2/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m0.txt...

Read matrix has 54 rows and 27 columns.

Input arrays: A (54, 27), B (27, 1024).

Output array: C (54, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 54, k= 27

lda= 1024, ldb= 27, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.127367 ms

xsmm-custom Time (libxsmm): 0.127367 ms

xsmm-custom No. of CPU cycles: 127366

CPU clock speed (GHz): 0.999995

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.12736666666666668

xsmm-custom avg execution time: 0.12736666666666668

Freeing A

Freeing B

Freeing C

{'a_cols': 27, 'a_nonzero': 162, 'a_rows': 54, 'a_size': 1458, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1111111111111111, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9829887464014655, 'speedup_best_over_ref': 0.9829887464014655, 'xsmm_custom_avg': 0.12736666666666668, 'xsmm_custom_best': 0.12736666666666668, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1252, 'xsmm_reference_best': 0.1252, 'xsmm_reference_cpu_freq': 0.999995, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m3.txt...

Read matrix has 27 rows and 54 columns.

Input arrays: A (27, 54), B (54, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.093133 ms

xsmm-reference Time (libxsmm): 0.093133 ms

xsmm-reference No. of CPU cycles: 93133

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.093133333333333332

xsmm-reference avg execution time: 0.093133333333333332

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1694397096 cleaned_data/example_mats/hex/p2/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m3.txt...

Read matrix has 27 rows and 54 columns.

Input arrays: A (27, 54), B (54, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 27, k= 54

lda= 1024, ldb= 54, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.102533 ms

xsmm-custom Time (libxsmm): 0.102500 ms

xsmm-custom No. of CPU cycles: 102500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.10253333333333334

xsmm-custom avg execution time: 0.10253333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 54, 'a_nonzero': 162, 'a_rows': 27, 'a_size': 1458, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1111111111111111, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9083224967490247, 'speedup_best_over_ref': 0.9083224967490247, 'xsmm_custom_avg': 0.10253333333333334, 'xsmm_custom_best': 0.10253333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.09313333333333333, 'xsmm_reference_best': 0.09313333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m6.txt...

Read matrix has 81 rows and 54 columns.

Input arrays: A (81, 54), B (54, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.260833 ms

xsmm-reference Time (libxsmm): 0.260833 ms

xsmm-reference No. of CPU cycles: 260833

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.26083333333333336

xsmm-reference avg execution time: 0.26083333333333336

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 968510597 cleaned_data/example_mats/hex/p2/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m6.txt...

Read matrix has 81 rows and 54 columns.

Input arrays: A (81, 54), B (54, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 81, k= 54

lda= 1024, ldb= 54, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.247300 ms

xsmm-custom Time (libxsmm): 0.247300 ms

xsmm-custom No. of CPU cycles: 247300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.24729999999999999

xsmm-custom avg execution time: 0.24729999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 54, 'a_nonzero': 162, 'a_rows': 81, 'a_size': 4374, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.037037037037037035, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.054724356382262, 'speedup_best_over_ref': 1.054724356382262, 'xsmm_custom_avg': 0.2473, 'xsmm_custom_best': 0.2473, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.26083333333333336, 'xsmm_reference_best': 0.26083333333333336, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m132.txt...

Read matrix has 27 rows and 81 columns.

Input arrays: A (27, 81), B (81, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.137733 ms

xsmm-reference Time (libxsmm): 0.137733 ms

xsmm-reference No. of CPU cycles: 137733

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.13773333333333332

xsmm-reference avg execution time: 0.13773333333333332

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1733990889 cleaned_data/example_mats/hex/p2/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m132.txt...

Read matrix has 27 rows and 81 columns.

Input arrays: A (27, 81), B (81, 1024).

Output array: C (27, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 27, k= 81

lda= 1024, ldb= 81, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.148300 ms

xsmm-custom Time (libxsmm): 0.148300 ms

xsmm-custom No. of CPU cycles: 148300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.14829999999999999

xsmm-custom avg execution time: 0.14829999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 81, 'a_nonzero': 216, 'a_rows': 27, 'a_size': 2187, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.09876543209876543, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9287480332659024, 'speedup_best_over_ref': 0.9287480332659024, 'xsmm_custom_avg': 0.1483, 'xsmm_custom_best': 0.1483, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.13773333333333332, 'xsmm_reference_best': 0.13773333333333332, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m460.txt...

Read matrix has 81 rows and 27 columns.

Input arrays: A (81, 27), B (27, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.199533 ms

xsmm-reference Time (libxsmm): 0.199533 ms

xsmm-reference No. of CPU cycles: 199533

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.19953333333333331

xsmm-reference avg execution time: 0.19953333333333331

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1116320319 cleaned_data/example_mats/hex/p2/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p2/gauss-legendre/m460.txt...

Read matrix has 81 rows and 27 columns.

Input arrays: A (81, 27), B (27, 1024).

Output array: C (81, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 81, k= 27

lda= 1024, ldb= 27, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.196700 ms

xsmm-custom Time (libxsmm): 0.196700 ms

xsmm-custom No. of CPU cycles: 196700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.19669999999999999

xsmm-custom avg execution time: 0.19669999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 27, 'a_nonzero': 216, 'a_rows': 81, 'a_size': 2187, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.09876543209876543, 'mat_file': 'data/example_mats/hex/p2/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0144043382477546, 'speedup_best_over_ref': 1.0144043382477546, 'xsmm_custom_avg': 0.19669999999999999, 'xsmm_custom_best': 0.19669999999999999, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1995333333333333, 'xsmm_reference_best': 0.1995333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m0.txt...

Read matrix has 96 rows and 64 columns.

Input arrays: A (96, 64), B (64, 1024).

Output array: C (96, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.437733 ms

xsmm-reference Time (libxsmm): 0.437700 ms

xsmm-reference No. of CPU cycles: 437700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.43773333333333331

xsmm-reference avg execution time: 0.43773333333333331

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1669701959 cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m0.txt...

Read matrix has 96 rows and 64 columns.

Input arrays: A (96, 64), B (64, 1024).

Output array: C (96, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 96, k= 64

lda= 1024, ldb= 64, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 96

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.410100 ms

xsmm-custom Time (libxsmm): 0.410100 ms

xsmm-custom No. of CPU cycles: 410100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.41010000000000002

xsmm-custom avg execution time: 0.41010000000000002

Freeing A

Freeing B

Freeing C

{'a_cols': 64, 'a_nonzero': 96, 'a_rows': 96, 'a_size': 6144, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.015625, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0673819393643826, 'speedup_best_over_ref': 1.0673819393643826, 'xsmm_custom_avg': 0.4101, 'xsmm_custom_best': 0.4101, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.4377333333333333, 'xsmm_reference_best': 0.4377333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m3.txt...

Read matrix has 64 rows and 96 columns.

Input arrays: A (64, 96), B (96, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.375900 ms

xsmm-reference Time (libxsmm): 0.375867 ms

xsmm-reference No. of CPU cycles: 375866

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.37589999999999996

xsmm-reference avg execution time: 0.37589999999999996

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 574662880 cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m3.txt...

Read matrix has 64 rows and 96 columns.

Input arrays: A (64, 96), B (96, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 64, k= 96

lda= 1024, ldb= 96, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 64

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.362900 ms

xsmm-custom Time (libxsmm): 0.362900 ms

xsmm-custom No. of CPU cycles: 362900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.3629

xsmm-custom avg execution time: 0.3629

Freeing A

Freeing B

Freeing C

{'a_cols': 96, 'a_nonzero': 384, 'a_rows': 64, 'a_size': 6144, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0625, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0358225406448056, 'speedup_best_over_ref': 1.0358225406448056, 'xsmm_custom_avg': 0.3629, 'xsmm_custom_best': 0.3629, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.37589999999999996, 'xsmm_reference_best': 0.37589999999999996, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m6.txt...

Read matrix has 192 rows and 96 columns.

Input arrays: A (192, 96), B (96, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.108300 ms

xsmm-reference Time (libxsmm): 1.108300 ms

xsmm-reference No. of CPU cycles: 1108300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.1083000000000001

xsmm-reference avg execution time: 1.1083000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 543055065 cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m6.txt...

Read matrix has 192 rows and 96 columns.

Input arrays: A (192, 96), B (96, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 192, k= 96

lda= 1024, ldb= 96, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 192

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.946667 ms

xsmm-custom Time (libxsmm): 0.946667 ms

xsmm-custom No. of CPU cycles: 946666

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.94666666666666666

xsmm-custom avg execution time: 0.94666666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 96, 'a_nonzero': 384, 'a_rows': 192, 'a_size': 18432, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.020833333333333332, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1707394366197184, 'speedup_best_over_ref': 1.1707394366197184, 'xsmm_custom_avg': 0.9466666666666667, 'xsmm_custom_best': 0.9466666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.1083, 'xsmm_reference_best': 1.1083, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m132.txt...

Read matrix has 64 rows and 192 columns.

Input arrays: A (64, 192), B (192, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.684700 ms

xsmm-reference Time (libxsmm): 0.684700 ms

xsmm-reference No. of CPU cycles: 684700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.68469999999999998

xsmm-reference avg execution time: 0.68469999999999998

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 741789240 cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m132.txt...

Read matrix has 64 rows and 192 columns.

Input arrays: A (64, 192), B (192, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 64, k= 192

lda= 1024, ldb= 192, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 64

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.563067 ms

xsmm-custom Time (libxsmm): 0.563067 ms

xsmm-custom No. of CPU cycles: 563066

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.5630666666666666

xsmm-custom avg execution time: 0.5630666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 192, 'a_nonzero': 672, 'a_rows': 64, 'a_size': 12288, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0546875, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2160194174757282, 'speedup_best_over_ref': 1.2160194174757282, 'xsmm_custom_avg': 0.5630666666666666, 'xsmm_custom_best': 0.5630666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.6847, 'xsmm_reference_best': 0.6847, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m460.txt...

Read matrix has 192 rows and 64 columns.

Input arrays: A (192, 64), B (64, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.767733 ms

xsmm-reference Time (libxsmm): 0.767733 ms

xsmm-reference No. of CPU cycles: 767733

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.76773333333333338

xsmm-reference avg execution time: 0.76773333333333338

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 618715755 cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre-lobatto/m460.txt...

Read matrix has 192 rows and 64 columns.

Input arrays: A (192, 64), B (64, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 192, k= 64

lda= 1024, ldb= 64, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 192

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.634200 ms

xsmm-custom Time (libxsmm): 0.634200 ms

xsmm-custom No. of CPU cycles: 634200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.63419999999999999

xsmm-custom avg execution time: 0.63419999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 64, 'a_nonzero': 672, 'a_rows': 192, 'a_size': 12288, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0546875, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2105539787658994, 'speedup_best_over_ref': 1.2105539787658994, 'xsmm_custom_avg': 0.6342, 'xsmm_custom_best': 0.6342, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.7677333333333334, 'xsmm_reference_best': 0.7677333333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m0.txt...

Read matrix has 96 rows and 64 columns.

Input arrays: A (96, 64), B (64, 1024).

Output array: C (96, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.419467 ms

xsmm-reference Time (libxsmm): 0.419500 ms

xsmm-reference No. of CPU cycles: 419500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.41946666666666665

xsmm-reference avg execution time: 0.41946666666666665

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 218541086 cleaned_data/example_mats/hex/p3/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m0.txt...

Read matrix has 96 rows and 64 columns.

Input arrays: A (96, 64), B (64, 1024).

Output array: C (96, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 96, k= 64

lda= 1024, ldb= 64, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 96

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.379767 ms

xsmm-custom Time (libxsmm): 0.379767 ms

xsmm-custom No. of CPU cycles: 379766

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.3797666666666667

xsmm-custom avg execution time: 0.3797666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 64, 'a_nonzero': 384, 'a_rows': 96, 'a_size': 6144, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0625, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1045378741332397, 'speedup_best_over_ref': 1.1045378741332397, 'xsmm_custom_avg': 0.3797666666666667, 'xsmm_custom_best': 0.3797666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.41946666666666665, 'xsmm_reference_best': 0.41946666666666665, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m3.txt...

Read matrix has 64 rows and 96 columns.

Input arrays: A (64, 96), B (96, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.412600 ms

xsmm-reference Time (libxsmm): 0.412600 ms

xsmm-reference No. of CPU cycles: 412600

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.41260000000000002

xsmm-reference avg execution time: 0.41260000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 699852954 cleaned_data/example_mats/hex/p3/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m3.txt...

Read matrix has 64 rows and 96 columns.

Input arrays: A (64, 96), B (96, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 64, k= 96

lda= 1024, ldb= 96, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 64

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.393167 ms

xsmm-custom Time (libxsmm): 0.393167 ms

xsmm-custom No. of CPU cycles: 393166

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.39316666666666666

xsmm-custom avg execution time: 0.39316666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 96, 'a_nonzero': 384, 'a_rows': 64, 'a_size': 6144, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0625, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0494277236117, 'speedup_best_over_ref': 1.0494277236117, 'xsmm_custom_avg': 0.39316666666666666, 'xsmm_custom_best': 0.39316666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.4126, 'xsmm_reference_best': 0.4126, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m6.txt...

Read matrix has 192 rows and 96 columns.

Input arrays: A (192, 96), B (96, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.136900 ms

xsmm-reference Time (libxsmm): 1.136900 ms

xsmm-reference No. of CPU cycles: 1136900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.1369

xsmm-reference avg execution time: 1.1369

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1833187758 cleaned_data/example_mats/hex/p3/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m6.txt...

Read matrix has 192 rows and 96 columns.

Input arrays: A (192, 96), B (96, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 192, k= 96

lda= 1024, ldb= 96, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 192

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.944300 ms

xsmm-custom Time (libxsmm): 0.944300 ms

xsmm-custom No. of CPU cycles: 944300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.94430000000000003

xsmm-custom avg execution time: 0.94430000000000003

Freeing A

Freeing B

Freeing C

{'a_cols': 96, 'a_nonzero': 384, 'a_rows': 192, 'a_size': 18432, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.020833333333333332, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2039606057397014, 'speedup_best_over_ref': 1.2039606057397014, 'xsmm_custom_avg': 0.9443, 'xsmm_custom_best': 0.9443, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.1369, 'xsmm_reference_best': 1.1369, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m132.txt...

Read matrix has 64 rows and 192 columns.

Input arrays: A (64, 192), B (192, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.719700 ms

xsmm-reference Time (libxsmm): 0.719700 ms

xsmm-reference No. of CPU cycles: 719700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.71970000000000001

xsmm-reference avg execution time: 0.71970000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 433013146 cleaned_data/example_mats/hex/p3/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m132.txt...

Read matrix has 64 rows and 192 columns.

Input arrays: A (64, 192), B (192, 1024).

Output array: C (64, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 64, k= 192

lda= 1024, ldb= 192, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 64

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.573533 ms

xsmm-custom Time (libxsmm): 0.573533 ms

xsmm-custom No. of CPU cycles: 573533

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.57353333333333334

xsmm-custom avg execution time: 0.57353333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 192, 'a_nonzero': 768, 'a_rows': 64, 'a_size': 12288, 'a_unique': 8, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0625, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2548529582703707, 'speedup_best_over_ref': 1.2548529582703707, 'xsmm_custom_avg': 0.5735333333333333, 'xsmm_custom_best': 0.5735333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.7197, 'xsmm_reference_best': 0.7197, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m460.txt...

Read matrix has 192 rows and 64 columns.

Input arrays: A (192, 64), B (64, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.766633 ms

xsmm-reference Time (libxsmm): 0.766600 ms

xsmm-reference No. of CPU cycles: 766600

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.76663333333333328

xsmm-reference avg execution time: 0.76663333333333328

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 725603852 cleaned_data/example_mats/hex/p3/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p3/gauss-legendre/m460.txt...

Read matrix has 192 rows and 64 columns.

Input arrays: A (192, 64), B (64, 1024).

Output array: C (192, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 192, k= 64

lda= 1024, ldb= 64, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 192

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.629333 ms

xsmm-custom Time (libxsmm): 0.629333 ms

xsmm-custom No. of CPU cycles: 629333

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.6293333333333333

xsmm-custom avg execution time: 0.6293333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 64, 'a_nonzero': 768, 'a_rows': 192, 'a_size': 12288, 'a_unique': 8, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0625, 'mat_file': 'data/example_mats/hex/p3/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.218167372881356, 'speedup_best_over_ref': 1.218167372881356, 'xsmm_custom_avg': 0.6293333333333333, 'xsmm_custom_best': 0.6293333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.7666333333333333, 'xsmm_reference_best': 0.7666333333333333, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m0.txt...

Read matrix has 150 rows and 125 columns.

Input arrays: A (150, 125), B (125, 1024).

Output array: C (150, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.086933 ms

xsmm-reference Time (libxsmm): 1.086900 ms

xsmm-reference No. of CPU cycles: 1086900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.0869333333333315

xsmm-reference avg execution time: 1.0869333333333315

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2055716380 cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m0.txt...

Read matrix has 150 rows and 125 columns.

Input arrays: A (150, 125), B (125, 1024).

Output array: C (150, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 150, k= 125

lda= 1024, ldb= 125, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.884800 ms

xsmm-custom Time (libxsmm): 0.884800 ms

xsmm-custom No. of CPU cycles: 884800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.88480000000000003

xsmm-custom avg execution time: 0.88480000000000003

Freeing A

Freeing B

Freeing C

{'a_cols': 125, 'a_nonzero': 150, 'a_rows': 150, 'a_size': 18750, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.008, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2284508740204922, 'speedup_best_over_ref': 1.2284508740204922, 'xsmm_custom_avg': 0.8848, 'xsmm_custom_best': 0.8848, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.0869333333333315, 'xsmm_reference_best': 1.0869333333333315, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m3.txt...

Read matrix has 125 rows and 150 columns.

Input arrays: A (125, 150), B (150, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.086033 ms

xsmm-reference Time (libxsmm): 1.086033 ms

xsmm-reference No. of CPU cycles: 1086033

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.0860333333333334

xsmm-reference avg execution time: 1.0860333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 780883480 cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m3.txt...

Read matrix has 125 rows and 150 columns.

Input arrays: A (125, 150), B (150, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 125, k= 150

lda= 1024, ldb= 150, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.861100 ms

xsmm-custom Time (libxsmm): 0.861100 ms

xsmm-custom No. of CPU cycles: 861100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.86109999999999998

xsmm-custom avg execution time: 0.86109999999999998

Freeing A

Freeing B

Freeing C

{'a_cols': 150, 'a_nonzero': 750, 'a_rows': 125, 'a_size': 18750, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.04, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2612162737583712, 'speedup_best_over_ref': 1.2612162737583712, 'xsmm_custom_avg': 0.8611, 'xsmm_custom_best': 0.8611, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.0860333333333334, 'xsmm_reference_best': 1.0860333333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m6.txt...

Read matrix has 375 rows and 150 columns.

Input arrays: A (375, 150), B (150, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.751800 ms

xsmm-reference Time (libxsmm): 2.751800 ms

xsmm-reference No. of CPU cycles: 2751800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.7518000000000002

xsmm-reference avg execution time: 2.7518000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 339532837 cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m6.txt...

Read matrix has 375 rows and 150 columns.

Input arrays: A (375, 150), B (150, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 375, k= 150

lda= 1024, ldb= 150, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.636467 ms

xsmm-custom Time (libxsmm): 2.636467 ms

xsmm-custom No. of CPU cycles: 2636466

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.6364666666666663

xsmm-custom avg execution time: 2.6364666666666663

Freeing A

Freeing B

Freeing C

{'a_cols': 150, 'a_nonzero': 750, 'a_rows': 375, 'a_size': 56250, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.013333333333333334, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0437454168457787, 'speedup_best_over_ref': 1.0437454168457787, 'xsmm_custom_avg': 2.6364666666666663, 'xsmm_custom_best': 2.6364666666666663, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.7518000000000002, 'xsmm_reference_best': 2.7518000000000002, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m132.txt...

Read matrix has 125 rows and 375 columns.

Input arrays: A (125, 375), B (375, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.235300 ms

xsmm-reference Time (libxsmm): 2.235300 ms

xsmm-reference No. of CPU cycles: 2235300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.2353000000000001

xsmm-reference avg execution time: 2.2353000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 237029179 cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m132.txt...

Read matrix has 125 rows and 375 columns.

Input arrays: A (125, 375), B (375, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 125, k= 375

lda= 1024, ldb= 375, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.130767 ms

xsmm-custom Time (libxsmm): 2.130767 ms

xsmm-custom No. of CPU cycles: 2130766

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.1307666666666667

xsmm-custom avg execution time: 2.1307666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 375, 'a_nonzero': 1650, 'a_rows': 125, 'a_size': 46875, 'a_unique': 11, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0352, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0490590241384166, 'speedup_best_over_ref': 1.0490590241384166, 'xsmm_custom_avg': 2.1307666666666667, 'xsmm_custom_best': 2.1307666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.2353, 'xsmm_reference_best': 2.2353, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m460.txt...

Read matrix has 375 rows and 125 columns.

Input arrays: A (375, 125), B (125, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.365433 ms

xsmm-reference Time (libxsmm): 2.365433 ms

xsmm-reference No. of CPU cycles: 2365433

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.3654333333333333

xsmm-reference avg execution time: 2.3654333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 259067468 cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre-lobatto/m460.txt...

Read matrix has 375 rows and 125 columns.

Input arrays: A (375, 125), B (125, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 375, k= 125

lda= 1024, ldb= 125, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.245000 ms

xsmm-custom Time (libxsmm): 2.245000 ms

xsmm-custom No. of CPU cycles: 2245000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.2450000000000006

xsmm-custom avg execution time: 2.2450000000000006

Freeing A

Freeing B

Freeing C

{'a_cols': 125, 'a_nonzero': 1650, 'a_rows': 375, 'a_size': 46875, 'a_unique': 11, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0352, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0536451373422417, 'speedup_best_over_ref': 1.0536451373422417, 'xsmm_custom_avg': 2.2450000000000006, 'xsmm_custom_best': 2.2450000000000006, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.3654333333333333, 'xsmm_reference_best': 2.3654333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m0.txt...

Read matrix has 150 rows and 125 columns.

Input arrays: A (150, 125), B (125, 1024).

Output array: C (150, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.028867 ms

xsmm-reference Time (libxsmm): 1.028867 ms

xsmm-reference No. of CPU cycles: 1028866

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.0288666666666666

xsmm-reference avg execution time: 1.0288666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1950074453 cleaned_data/example_mats/hex/p4/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m0.txt...

Read matrix has 150 rows and 125 columns.

Input arrays: A (150, 125), B (125, 1024).

Output array: C (150, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 150, k= 125

lda= 1024, ldb= 125, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.892033 ms

xsmm-custom Time (libxsmm): 0.892033 ms

xsmm-custom No. of CPU cycles: 892033

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.89203333333333334

xsmm-custom avg execution time: 0.89203333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 125, 'a_nonzero': 750, 'a_rows': 150, 'a_size': 18750, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.04, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.153394865662718, 'speedup_best_over_ref': 1.153394865662718, 'xsmm_custom_avg': 0.8920333333333333, 'xsmm_custom_best': 0.8920333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.0288666666666666, 'xsmm_reference_best': 1.0288666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m3.txt...

Read matrix has 125 rows and 150 columns.

Input arrays: A (125, 150), B (150, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.075100 ms

xsmm-reference Time (libxsmm): 1.075100 ms

xsmm-reference No. of CPU cycles: 1075100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.0750999999999999

xsmm-reference avg execution time: 1.0750999999999999

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1865718452 cleaned_data/example_mats/hex/p4/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m3.txt...

Read matrix has 125 rows and 150 columns.

Input arrays: A (125, 150), B (150, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 125, k= 150

lda= 1024, ldb= 150, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.869933 ms

xsmm-custom Time (libxsmm): 0.869933 ms

xsmm-custom No. of CPU cycles: 869933

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.86993333333333334

xsmm-custom avg execution time: 0.86993333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 150, 'a_nonzero': 750, 'a_rows': 125, 'a_size': 18750, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.04, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.2358418269599203, 'speedup_best_over_ref': 1.2358418269599203, 'xsmm_custom_avg': 0.8699333333333333, 'xsmm_custom_best': 0.8699333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.0751, 'xsmm_reference_best': 1.0751, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m6.txt...

Read matrix has 375 rows and 150 columns.

Input arrays: A (375, 150), B (150, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.742867 ms

xsmm-reference Time (libxsmm): 2.742833 ms

xsmm-reference No. of CPU cycles: 2742833

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.7428666666666666

xsmm-reference avg execution time: 2.7428666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1731530790 cleaned_data/example_mats/hex/p4/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m6.txt...

Read matrix has 375 rows and 150 columns.

Input arrays: A (375, 150), B (150, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 375, k= 150

lda= 1024, ldb= 150, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.635033 ms

xsmm-custom Time (libxsmm): 2.635067 ms

xsmm-custom No. of CPU cycles: 2635066

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.6350333333333333

xsmm-custom avg execution time: 2.6350333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 150, 'a_nonzero': 750, 'a_rows': 375, 'a_size': 56250, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.013333333333333334, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0409229484763, 'speedup_best_over_ref': 1.0409229484763, 'xsmm_custom_avg': 2.6350333333333333, 'xsmm_custom_best': 2.6350333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.7428666666666666, 'xsmm_reference_best': 2.7428666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m132.txt...

Read matrix has 125 rows and 375 columns.

Input arrays: A (125, 375), B (375, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.266400 ms

xsmm-reference Time (libxsmm): 2.266400 ms

xsmm-reference No. of CPU cycles: 2266400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.2664

xsmm-reference avg execution time: 2.2664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1835654773 cleaned_data/example_mats/hex/p4/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m132.txt...

Read matrix has 125 rows and 375 columns.

Input arrays: A (125, 375), B (375, 1024).

Output array: C (125, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 125, k= 375

lda= 1024, ldb= 375, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.124767 ms

xsmm-custom Time (libxsmm): 2.124767 ms

xsmm-custom No. of CPU cycles: 2124766

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.1247666666666669

xsmm-custom avg execution time: 2.1247666666666669

Freeing A

Freeing B

Freeing C

{'a_cols': 375, 'a_nonzero': 1800, 'a_rows': 125, 'a_size': 46875, 'a_unique': 12, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0384, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0666582997348728, 'speedup_best_over_ref': 1.0666582997348728, 'xsmm_custom_avg': 2.124766666666667, 'xsmm_custom_best': 2.124766666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.2664, 'xsmm_reference_best': 2.2664, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m460.txt...

Read matrix has 375 rows and 125 columns.

Input arrays: A (375, 125), B (125, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.411467 ms

xsmm-reference Time (libxsmm): 2.411467 ms

xsmm-reference No. of CPU cycles: 2411466

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.4114666666666666

xsmm-reference avg execution time: 2.4114666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1248662615 cleaned_data/example_mats/hex/p4/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p4/gauss-legendre/m460.txt...

Read matrix has 375 rows and 125 columns.

Input arrays: A (375, 125), B (125, 1024).

Output array: C (375, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 375, k= 125

lda= 1024, ldb= 125, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.249600 ms

xsmm-custom Time (libxsmm): 2.249600 ms

xsmm-custom No. of CPU cycles: 2249600

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.2496

xsmm-custom avg execution time: 2.2496

Freeing A

Freeing B

Freeing C

{'a_cols': 125, 'a_nonzero': 1800, 'a_rows': 375, 'a_size': 46875, 'a_unique': 12, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0384, 'mat_file': 'data/example_mats/hex/p4/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0719535324798481, 'speedup_best_over_ref': 1.0719535324798481, 'xsmm_custom_avg': 2.2496, 'xsmm_custom_best': 2.2496, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.4114666666666666, 'xsmm_reference_best': 2.4114666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m0.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.363067 ms

xsmm-reference Time (libxsmm): 2.363033 ms

xsmm-reference No. of CPU cycles: 2363033

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.3630666666666666

xsmm-reference avg execution time: 2.3630666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 920824025 cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m0.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 216, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 216

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.169667 ms

xsmm-custom Time (libxsmm): 2.169667 ms

xsmm-custom No. of CPU cycles: 2169666

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.1696666666666666

xsmm-custom avg execution time: 2.1696666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 216, 'a_rows': 216, 'a_size': 46656, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.004629629629629629, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0891381164541405, 'speedup_best_over_ref': 1.0891381164541405, 'xsmm_custom_avg': 2.1696666666666666, 'xsmm_custom_best': 2.1696666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.3630666666666666, 'xsmm_reference_best': 2.3630666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m3.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.340567 ms

xsmm-reference Time (libxsmm): 2.340567 ms

xsmm-reference No. of CPU cycles: 2340566

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.3405666666666667

xsmm-reference avg execution time: 2.3405666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2048908357 cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m3.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 216, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 216

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.173900 ms

xsmm-custom Time (libxsmm): 2.173900 ms

xsmm-custom No. of CPU cycles: 2173900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.1739000000000002

xsmm-custom avg execution time: 2.1739000000000002

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 1296, 'a_rows': 216, 'a_size': 46656, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.027777777777777776, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0766671266694265, 'speedup_best_over_ref': 1.0766671266694265, 'xsmm_custom_avg': 2.1739, 'xsmm_custom_best': 2.1739, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.3405666666666667, 'xsmm_reference_best': 2.3405666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m6.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 6.575767 ms

xsmm-reference Time (libxsmm): 6.575733 ms

xsmm-reference No. of CPU cycles: 6575733

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 6.5757666666666674

xsmm-reference avg execution time: 6.5757666666666674

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1572218004 cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m6.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 648, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 648

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 6.592233 ms

xsmm-custom Time (libxsmm): 6.592233 ms

xsmm-custom No. of CPU cycles: 6592233

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 6.5922333333333336

xsmm-custom avg execution time: 6.5922333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 1296, 'a_rows': 648, 'a_size': 139968, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.009259259259259259, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9975021110700977, 'speedup_best_over_ref': 0.9975021110700977, 'xsmm_custom_avg': 6.592233333333334, 'xsmm_custom_best': 6.592233333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 6.575766666666667, 'xsmm_reference_best': 6.575766666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m132.txt...

Read matrix has 216 rows and 648 columns.

Input arrays: A (216, 648), B (648, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 6.753667 ms

xsmm-reference Time (libxsmm): 6.753633 ms

xsmm-reference No. of CPU cycles: 6753633

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 6.7536666666666667

xsmm-reference avg execution time: 6.7536666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1420283012 cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m132.txt...

Read matrix has 216 rows and 648 columns.

Input arrays: A (216, 648), B (648, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 216, k= 648

lda= 1024, ldb= 648, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 216

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 7.089500 ms

xsmm-custom Time (libxsmm): 7.089500 ms

xsmm-custom No. of CPU cycles: 7089500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 7.0895000000000001

xsmm-custom avg execution time: 7.0895000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 648, 'a_nonzero': 3456, 'a_rows': 216, 'a_size': 139968, 'a_unique': 16, 'alpha': 1.0, 'beta': 0.0, 'density': 0.024691358024691357, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9526294755154336, 'speedup_best_over_ref': 0.9526294755154336, 'xsmm_custom_avg': 7.0895, 'xsmm_custom_best': 7.0895, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 6.753666666666667, 'xsmm_reference_best': 6.753666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m460.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 6.581033 ms

xsmm-reference Time (libxsmm): 6.581000 ms

xsmm-reference No. of CPU cycles: 6581000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 6.581033333333334

xsmm-reference avg execution time: 6.581033333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 497982813 cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre-lobatto/m460.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 648, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 648

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 6.576467 ms

xsmm-custom Time (libxsmm): 6.576467 ms

xsmm-custom No. of CPU cycles: 6576466

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 6.5764666666666667

xsmm-custom avg execution time: 6.5764666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 3456, 'a_rows': 648, 'a_size': 139968, 'a_unique': 16, 'alpha': 1.0, 'beta': 0.0, 'density': 0.024691358024691357, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0006943951666043, 'speedup_best_over_ref': 1.0006943951666043, 'xsmm_custom_avg': 6.576466666666667, 'xsmm_custom_best': 6.576466666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 6.581033333333334, 'xsmm_reference_best': 6.581033333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m0.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.298900 ms

xsmm-reference Time (libxsmm): 2.298900 ms

xsmm-reference No. of CPU cycles: 2298900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.2989000000000002

xsmm-reference avg execution time: 2.2989000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 295594528 cleaned_data/example_mats/hex/p5/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m0.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 216, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 216

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.176233 ms

xsmm-custom Time (libxsmm): 2.176233 ms

xsmm-custom No. of CPU cycles: 2176233

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.1762333333333337

xsmm-custom avg execution time: 2.1762333333333337

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 1296, 'a_rows': 216, 'a_size': 46656, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 0.027777777777777776, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0563665048171917, 'speedup_best_over_ref': 1.0563665048171917, 'xsmm_custom_avg': 2.1762333333333337, 'xsmm_custom_best': 2.1762333333333337, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.2989, 'xsmm_reference_best': 2.2989, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m3.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 2.285767 ms

xsmm-reference Time (libxsmm): 2.285667 ms

xsmm-reference No. of CPU cycles: 2285666

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 2.2857666666666665

xsmm-reference avg execution time: 2.2857666666666665

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1190167409 cleaned_data/example_mats/hex/p5/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m3.txt...

Read matrix has 216 rows and 216 columns.

Input arrays: A (216, 216), B (216, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 216, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 216

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 2.169833 ms

xsmm-custom Time (libxsmm): 2.169833 ms

xsmm-custom No. of CPU cycles: 2169833

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 2.1698333333333335

xsmm-custom avg execution time: 2.1698333333333335

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 1296, 'a_rows': 216, 'a_size': 46656, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 0.027777777777777776, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0534296028880865, 'speedup_best_over_ref': 1.0534296028880865, 'xsmm_custom_avg': 2.1698333333333335, 'xsmm_custom_best': 2.1698333333333335, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 2.2857666666666665, 'xsmm_reference_best': 2.2857666666666665, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m6.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 6.593467 ms

xsmm-reference Time (libxsmm): 6.593467 ms

xsmm-reference No. of CPU cycles: 6593466

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 6.593466666666667

xsmm-reference avg execution time: 6.593466666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 655887956 cleaned_data/example_mats/hex/p5/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m6.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 648, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 648

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 6.623033 ms

xsmm-custom Time (libxsmm): 6.623033 ms

xsmm-custom No. of CPU cycles: 6623033

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 6.6230333333333338

xsmm-custom avg execution time: 6.6230333333333338

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 1296, 'a_rows': 648, 'a_size': 139968, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 0.009259259259259259, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9955357816911687, 'speedup_best_over_ref': 0.9955357816911687, 'xsmm_custom_avg': 6.623033333333334, 'xsmm_custom_best': 6.623033333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 6.593466666666667, 'xsmm_reference_best': 6.593466666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m132.txt...

Read matrix has 216 rows and 648 columns.

Input arrays: A (216, 648), B (648, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 6.614967 ms

xsmm-reference Time (libxsmm): 6.614933 ms

xsmm-reference No. of CPU cycles: 6614933

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 6.6149666666666649

xsmm-reference avg execution time: 6.6149666666666649

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 933152997 cleaned_data/example_mats/hex/p5/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m132.txt...

Read matrix has 216 rows and 648 columns.

Input arrays: A (216, 648), B (648, 1024).

Output array: C (216, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 216, k= 648

lda= 1024, ldb= 648, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 216

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 6.578267 ms

xsmm-custom Time (libxsmm): 6.578267 ms

xsmm-custom No. of CPU cycles: 6578266

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 6.5782666666666669

xsmm-custom avg execution time: 6.5782666666666669

Freeing A

Freeing B

Freeing C

{'a_cols': 648, 'a_nonzero': 3888, 'a_rows': 216, 'a_size': 139968, 'a_unique': 18, 'alpha': 1.0, 'beta': 0.0, 'density': 0.027777777777777776, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.005578977238178, 'speedup_best_over_ref': 1.005578977238178, 'xsmm_custom_avg': 6.578266666666667, 'xsmm_custom_best': 6.578266666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 6.614966666666665, 'xsmm_reference_best': 6.614966666666665, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m460.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 6.572567 ms

xsmm-reference Time (libxsmm): 6.572567 ms

xsmm-reference No. of CPU cycles: 6572566

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 6.5725666666666678

xsmm-reference avg execution time: 6.5725666666666678

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1741294975 cleaned_data/example_mats/hex/p5/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p5/gauss-legendre/m460.txt...

Read matrix has 648 rows and 216 columns.

Input arrays: A (648, 216), B (216, 1024).

Output array: C (648, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 648, k= 216

lda= 1024, ldb= 216, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 648

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 6.577600 ms

xsmm-custom Time (libxsmm): 6.577600 ms

xsmm-custom No. of CPU cycles: 6577600

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 6.5776000000000003

xsmm-custom avg execution time: 6.5776000000000003

Freeing A

Freeing B

Freeing C

{'a_cols': 216, 'a_nonzero': 3888, 'a_rows': 648, 'a_size': 139968, 'a_unique': 18, 'alpha': 1.0, 'beta': 0.0, 'density': 0.027777777777777776, 'mat_file': 'data/example_mats/hex/p5/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9992347766155844, 'speedup_best_over_ref': 0.9992347766155844, 'xsmm_custom_avg': 6.5776, 'xsmm_custom_best': 6.5776, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 6.572566666666668, 'xsmm_reference_best': 6.572566666666668, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m0.txt...

Read matrix has 294 rows and 343 columns.

Input arrays: A (294, 343), B (343, 1024).

Output array: C (294, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 4.524300 ms

xsmm-reference Time (libxsmm): 4.524300 ms

xsmm-reference No. of CPU cycles: 4524300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 4.5243000000000002

xsmm-reference avg execution time: 4.5243000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 723597032 cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m0.txt...

Read matrix has 294 rows and 343 columns.

Input arrays: A (294, 343), B (343, 1024).

Output array: C (294, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 294, k= 343

lda= 1024, ldb= 343, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 4.561167 ms

xsmm-custom Time (libxsmm): 4.561167 ms

xsmm-custom No. of CPU cycles: 4561166

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 4.5611666666666668

xsmm-custom avg execution time: 4.5611666666666668

Freeing A

Freeing B

Freeing C

{'a_cols': 343, 'a_nonzero': 294, 'a_rows': 294, 'a_size': 100842, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0029154518950437317, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9919172726276172, 'speedup_best_over_ref': 0.9919172726276172, 'xsmm_custom_avg': 4.561166666666667, 'xsmm_custom_best': 4.561166666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 4.5243, 'xsmm_reference_best': 4.5243, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m3.txt...

Read matrix has 343 rows and 294 columns.

Input arrays: A (343, 294), B (294, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 4.438533 ms

xsmm-reference Time (libxsmm): 4.438533 ms

xsmm-reference No. of CPU cycles: 4438533

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 4.4385333333333339

xsmm-reference avg execution time: 4.4385333333333339

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 50798298 cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m3.txt...

Read matrix has 343 rows and 294 columns.

Input arrays: A (343, 294), B (294, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 343, k= 294

lda= 1024, ldb= 294, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 4.444733 ms

xsmm-custom Time (libxsmm): 4.444733 ms

xsmm-custom No. of CPU cycles: 4444733

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 4.4447333333333336

xsmm-custom avg execution time: 4.4447333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 294, 'a_nonzero': 2058, 'a_rows': 343, 'a_size': 100842, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.02040816326530612, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9986050906691065, 'speedup_best_over_ref': 0.9986050906691065, 'xsmm_custom_avg': 4.444733333333334, 'xsmm_custom_best': 4.444733333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 4.438533333333334, 'xsmm_reference_best': 4.438533333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m6.txt...

Read matrix has 1029 rows and 294 columns.

Input arrays: A (1029, 294), B (294, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 13.618433 ms

xsmm-reference Time (libxsmm): 13.618433 ms

xsmm-reference No. of CPU cycles: 13618433

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 13.618433333333334

xsmm-reference avg execution time: 13.618433333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1765328458 cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m6.txt...

Read matrix has 1029 rows and 294 columns.

Input arrays: A (1029, 294), B (294, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 1029, k= 294

lda= 1024, ldb= 294, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 13.552333 ms

xsmm-custom Time (libxsmm): 13.552333 ms

xsmm-custom No. of CPU cycles: 13552333

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 13.552333333333335

xsmm-custom avg execution time: 13.552333333333335

Freeing A

Freeing B

Freeing C

{'a_cols': 294, 'a_nonzero': 2058, 'a_rows': 1029, 'a_size': 302526, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.006802721088435374, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0048773888875224, 'speedup_best_over_ref': 1.0048773888875224, 'xsmm_custom_avg': 13.552333333333335, 'xsmm_custom_best': 13.552333333333335, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 13.618433333333334, 'xsmm_reference_best': 13.618433333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m132.txt...

Read matrix has 343 rows and 1029 columns.

Input arrays: A (343, 1029), B (1029, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 30.454867 ms

xsmm-reference Time (libxsmm): 30.454600 ms

xsmm-reference No. of CPU cycles: 30454600

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 30.454866666666664

xsmm-reference avg execution time: 30.454866666666664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2032170372 cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m132.txt...

Read matrix has 343 rows and 1029 columns.

Input arrays: A (343, 1029), B (1029, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 343, k= 1029

lda= 1024, ldb= 1029, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 26.302900 ms

xsmm-custom Time (libxsmm): 26.302867 ms

xsmm-custom No. of CPU cycles: 26302866

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 26.302900000000001

xsmm-custom avg execution time: 26.302900000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 1029, 'a_nonzero': 6468, 'a_rows': 343, 'a_size': 352947, 'a_unique': 22, 'alpha': 1.0, 'beta': 0.0, 'density': 0.018325697625989172, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.157852049267064, 'speedup_best_over_ref': 1.157852049267064, 'xsmm_custom_avg': 26.3029, 'xsmm_custom_best': 26.3029, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 30.454866666666664, 'xsmm_reference_best': 30.454866666666664, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m460.txt...

Read matrix has 1029 rows and 343 columns.

Input arrays: A (1029, 343), B (343, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 16.038000 ms

xsmm-reference Time (libxsmm): 16.037967 ms

xsmm-reference No. of CPU cycles: 16037966

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 16.038

xsmm-reference avg execution time: 16.038

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1930372731 cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre-lobatto/m460.txt...

Read matrix has 1029 rows and 343 columns.

Input arrays: A (1029, 343), B (343, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 1029, k= 343

lda= 1024, ldb= 343, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 16.056433 ms

xsmm-custom Time (libxsmm): 16.056433 ms

xsmm-custom No. of CPU cycles: 16056433

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 16.056433333333334

xsmm-custom avg execution time: 16.056433333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 343, 'a_nonzero': 6468, 'a_rows': 1029, 'a_size': 352947, 'a_unique': 22, 'alpha': 1.0, 'beta': 0.0, 'density': 0.018325697625989172, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.998851965878682, 'speedup_best_over_ref': 0.998851965878682, 'xsmm_custom_avg': 16.056433333333334, 'xsmm_custom_best': 16.056433333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 16.038, 'xsmm_reference_best': 16.038, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m0.txt...

Read matrix has 294 rows and 343 columns.

Input arrays: A (294, 343), B (343, 1024).

Output array: C (294, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 4.524300 ms

xsmm-reference Time (libxsmm): 4.524200 ms

xsmm-reference No. of CPU cycles: 4524200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 4.5243000000000002

xsmm-reference avg execution time: 4.5243000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 677830820 cleaned_data/example_mats/hex/p6/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m0.txt...

Read matrix has 294 rows and 343 columns.

Input arrays: A (294, 343), B (343, 1024).

Output array: C (294, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 294, k= 343

lda= 1024, ldb= 343, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 4.544267 ms

xsmm-custom Time (libxsmm): 4.544267 ms

xsmm-custom No. of CPU cycles: 4544266

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 4.5442666666666662

xsmm-custom avg execution time: 4.5442666666666662

Freeing A

Freeing B

Freeing C

{'a_cols': 343, 'a_nonzero': 2058, 'a_rows': 294, 'a_size': 100842, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.02040816326530612, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9956061850830352, 'speedup_best_over_ref': 0.9956061850830352, 'xsmm_custom_avg': 4.544266666666666, 'xsmm_custom_best': 4.544266666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 4.5243, 'xsmm_reference_best': 4.5243, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m3.txt...

Read matrix has 343 rows and 294 columns.

Input arrays: A (343, 294), B (294, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 4.439800 ms

xsmm-reference Time (libxsmm): 4.439800 ms

xsmm-reference No. of CPU cycles: 4439800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 4.4398

xsmm-reference avg execution time: 4.4398

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 821664254 cleaned_data/example_mats/hex/p6/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m3.txt...

Read matrix has 343 rows and 294 columns.

Input arrays: A (343, 294), B (294, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 343, k= 294

lda= 1024, ldb= 294, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 4.437833 ms

xsmm-custom Time (libxsmm): 4.437833 ms

xsmm-custom No. of CPU cycles: 4437833

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 4.4378333333333329

xsmm-custom avg execution time: 4.4378333333333329

Freeing A

Freeing B

Freeing C

{'a_cols': 294, 'a_nonzero': 2058, 'a_rows': 343, 'a_size': 100842, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.02040816326530612, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.000443159199309, 'speedup_best_over_ref': 1.000443159199309, 'xsmm_custom_avg': 4.437833333333333, 'xsmm_custom_best': 4.437833333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 4.4398, 'xsmm_reference_best': 4.4398, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m6.txt...

Read matrix has 1029 rows and 294 columns.

Input arrays: A (1029, 294), B (294, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 13.563733 ms

xsmm-reference Time (libxsmm): 13.563667 ms

xsmm-reference No. of CPU cycles: 13563666

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 13.563733333333335

xsmm-reference avg execution time: 13.563733333333335

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1317006725 cleaned_data/example_mats/hex/p6/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m6.txt...

Read matrix has 1029 rows and 294 columns.

Input arrays: A (1029, 294), B (294, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 1029, k= 294

lda= 1024, ldb= 294, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 13.564933 ms

xsmm-custom Time (libxsmm): 13.564933 ms

xsmm-custom No. of CPU cycles: 13564933

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 13.564933333333332

xsmm-custom avg execution time: 13.564933333333332

Freeing A

Freeing B

Freeing C

{'a_cols': 294, 'a_nonzero': 2058, 'a_rows': 1029, 'a_size': 302526, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.006802721088435374, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9999115366091001, 'speedup_best_over_ref': 0.9999115366091001, 'xsmm_custom_avg': 13.564933333333332, 'xsmm_custom_best': 13.564933333333332, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 13.563733333333335, 'xsmm_reference_best': 13.563733333333335, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m132.txt...

Read matrix has 343 rows and 1029 columns.

Input arrays: A (343, 1029), B (1029, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 26.737900 ms

xsmm-reference Time (libxsmm): 26.737900 ms

xsmm-reference No. of CPU cycles: 26737900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 26.7379

xsmm-reference avg execution time: 26.7379

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1843377416 cleaned_data/example_mats/hex/p6/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m132.txt...

Read matrix has 343 rows and 1029 columns.

Input arrays: A (343, 1029), B (1029, 1024).

Output array: C (343, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 343, k= 1029

lda= 1024, ldb= 1029, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 24.157833 ms

xsmm-custom Time (libxsmm): 24.157833 ms

xsmm-custom No. of CPU cycles: 24157833

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 24.157833333333333

xsmm-custom avg execution time: 24.157833333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 1029, 'a_nonzero': 7056, 'a_rows': 343, 'a_size': 352947, 'a_unique': 24, 'alpha': 1.0, 'beta': 0.0, 'density': 0.019991670137442734, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1068004167040366, 'speedup_best_over_ref': 1.1068004167040366, 'xsmm_custom_avg': 24.157833333333333, 'xsmm_custom_best': 24.157833333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 26.7379, 'xsmm_reference_best': 26.7379, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m460.txt...

Read matrix has 1029 rows and 343 columns.

Input arrays: A (1029, 343), B (343, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 16.060133 ms

xsmm-reference Time (libxsmm): 16.060200 ms

xsmm-reference No. of CPU cycles: 16060200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 16.060133333333333

xsmm-reference avg execution time: 16.060133333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 387882571 cleaned_data/example_mats/hex/p6/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/hex/p6/gauss-legendre/m460.txt...

Read matrix has 1029 rows and 343 columns.

Input arrays: A (1029, 343), B (343, 1024).

Output array: C (1029, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 1029, k= 343

lda= 1024, ldb= 343, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 16.088800 ms

xsmm-custom Time (libxsmm): 16.088767 ms

xsmm-custom No. of CPU cycles: 16088766

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 16.088799999999999

xsmm-custom avg execution time: 16.088799999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 343, 'a_nonzero': 7056, 'a_rows': 1029, 'a_size': 352947, 'a_unique': 24, 'alpha': 1.0, 'beta': 0.0, 'density': 0.019991670137442734, 'mat_file': 'data/example_mats/hex/p6/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9982182222001227, 'speedup_best_over_ref': 0.9982182222001227, 'xsmm_custom_avg': 16.0888, 'xsmm_custom_best': 16.0888, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 16.060133333333333, 'xsmm_reference_best': 16.060133333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m0.txt...

Read matrix has 8 rows and 4 columns.

Input arrays: A (8, 4), B (4, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.003033 ms

xsmm-reference Time (libxsmm): 0.003033 ms

xsmm-reference No. of CPU cycles: 3033

CPU clock speed (GHz): 0.999890

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0030333333333333332

xsmm-reference avg execution time: 0.0030333333333333332

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 991216341 cleaned_data/example_mats/quad/p1/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m0.txt...

Read matrix has 8 rows and 4 columns.

Input arrays: A (8, 4), B (4, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 8, k= 4

lda= 1024, ldb= 4, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 8

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.003800 ms

xsmm-custom Time (libxsmm): 0.003800 ms

xsmm-custom No. of CPU cycles: 3800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0038

xsmm-custom avg execution time: 0.0038

Freeing A

Freeing B

Freeing C

{'a_cols': 4, 'a_nonzero': 16, 'a_rows': 8, 'a_size': 32, 'a_unique': 2, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/quad/p1/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.7982456140350876, 'speedup_best_over_ref': 0.7982456140350876, 'xsmm_custom_avg': 0.0038, 'xsmm_custom_best': 0.0038, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.003033333333333333, 'xsmm_reference_best': 0.003033333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m3.txt...

Read matrix has 4 rows and 8 columns.

Input arrays: A (4, 8), B (8, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002367 ms

xsmm-reference Time (libxsmm): 0.002367 ms

xsmm-reference No. of CPU cycles: 2366

CPU clock speed (GHz): 0.999718

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0023666666666666667

xsmm-reference avg execution time: 0.0023666666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1758269046 cleaned_data/example_mats/quad/p1/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m3.txt...

Read matrix has 4 rows and 8 columns.

Input arrays: A (4, 8), B (8, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 4, k= 8

lda= 1024, ldb= 8, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.002867 ms

xsmm-custom Time (libxsmm): 0.002867 ms

xsmm-custom No. of CPU cycles: 2866

CPU clock speed (GHz): 0.999767

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0028666666666666662

xsmm-custom avg execution time: 0.0028666666666666662

Freeing A

Freeing B

Freeing C

{'a_cols': 8, 'a_nonzero': 16, 'a_rows': 4, 'a_size': 32, 'a_unique': 2, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/quad/p1/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8255813953488373, 'speedup_best_over_ref': 0.8255813953488373, 'xsmm_custom_avg': 0.0028666666666666662, 'xsmm_custom_best': 0.0028666666666666662, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0023666666666666667, 'xsmm_reference_best': 0.0023666666666666667, 'xsmm_reference_cpu_freq': 0.999767, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m6.txt...

Read matrix has 8 rows and 8 columns.

Input arrays: A (8, 8), B (8, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.004400 ms

xsmm-reference Time (libxsmm): 0.004400 ms

xsmm-reference No. of CPU cycles: 4400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0044000000000000003

xsmm-reference avg execution time: 0.0044000000000000003

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1023122624 cleaned_data/example_mats/quad/p1/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m6.txt...

Read matrix has 8 rows and 8 columns.

Input arrays: A (8, 8), B (8, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 8, k= 8

lda= 1024, ldb= 8, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 8

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.005200 ms

xsmm-custom Time (libxsmm): 0.005200 ms

xsmm-custom No. of CPU cycles: 5200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0051999999999999998

xsmm-custom avg execution time: 0.0051999999999999998

Freeing A

Freeing B

Freeing C

{'a_cols': 8, 'a_nonzero': 16, 'a_rows': 8, 'a_size': 64, 'a_unique': 2, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/quad/p1/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8461538461538463, 'speedup_best_over_ref': 0.8461538461538463, 'xsmm_custom_avg': 0.0052, 'xsmm_custom_best': 0.0052, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0044, 'xsmm_reference_best': 0.0044, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m132.txt...

Read matrix has 4 rows and 8 columns.

Input arrays: A (4, 8), B (8, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002200 ms

xsmm-reference Time (libxsmm): 0.002200 ms

xsmm-reference No. of CPU cycles: 2200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0022000000000000001

xsmm-reference avg execution time: 0.0022000000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1667162106 cleaned_data/example_mats/quad/p1/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m132.txt...

Read matrix has 4 rows and 8 columns.

Input arrays: A (4, 8), B (8, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 4, k= 8

lda= 1024, ldb= 8, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.002667 ms

xsmm-custom Time (libxsmm): 0.002667 ms

xsmm-custom No. of CPU cycles: 2666

CPU clock speed (GHz): 0.999750

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0026666666666666666

xsmm-custom avg execution time: 0.0026666666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 8, 'a_nonzero': 16, 'a_rows': 4, 'a_size': 32, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/quad/p1/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8250000000000001, 'speedup_best_over_ref': 0.8250000000000001, 'xsmm_custom_avg': 0.0026666666666666666, 'xsmm_custom_best': 0.0026666666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0022, 'xsmm_reference_best': 0.0022, 'xsmm_reference_cpu_freq': 0.99975, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m460.txt...

Read matrix has 8 rows and 4 columns.

Input arrays: A (8, 4), B (4, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002767 ms

xsmm-reference Time (libxsmm): 0.002767 ms

xsmm-reference No. of CPU cycles: 2766

CPU clock speed (GHz): 0.999759

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0027666666666666668

xsmm-reference avg execution time: 0.0027666666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1073753219 cleaned_data/example_mats/quad/p1/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p1/gauss-legendre/m460.txt...

Read matrix has 8 rows and 4 columns.

Input arrays: A (8, 4), B (4, 1024).

Output array: C (8, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 8, k= 4

lda= 1024, ldb= 4, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 8

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.003467 ms

xsmm-custom Time (libxsmm): 0.003467 ms

xsmm-custom No. of CPU cycles: 3466

CPU clock speed (GHz): 0.999808

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0034666666666666665

xsmm-custom avg execution time: 0.0034666666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 4, 'a_nonzero': 16, 'a_rows': 8, 'a_size': 32, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/quad/p1/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.7980769230769231, 'speedup_best_over_ref': 0.7980769230769231, 'xsmm_custom_avg': 0.0034666666666666665, 'xsmm_custom_best': 0.0034666666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.002766666666666667, 'xsmm_reference_best': 0.002766666666666667, 'xsmm_reference_cpu_freq': 0.999808, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m0.txt...

Read matrix has 12 rows and 9 columns.

Input arrays: A (12, 9), B (9, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.007167 ms

xsmm-reference Time (libxsmm): 0.007167 ms

xsmm-reference No. of CPU cycles: 7166

CPU clock speed (GHz): 0.999907

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0071666666666666667

xsmm-reference avg execution time: 0.0071666666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2057699862 cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m0.txt...

Read matrix has 12 rows and 9 columns.

Input arrays: A (12, 9), B (9, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 9

lda= 1024, ldb= 9, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.008233 ms

xsmm-custom Time (libxsmm): 0.008233 ms

xsmm-custom No. of CPU cycles: 8233

CPU clock speed (GHz): 0.999960

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0082333333333333338

xsmm-custom avg execution time: 0.0082333333333333338

Freeing A

Freeing B

Freeing C

{'a_cols': 9, 'a_nonzero': 12, 'a_rows': 12, 'a_size': 108, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1111111111111111, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8704453441295547, 'speedup_best_over_ref': 0.8704453441295547, 'xsmm_custom_avg': 0.008233333333333334, 'xsmm_custom_best': 0.008233333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.007166666666666667, 'xsmm_reference_best': 0.007166666666666667, 'xsmm_reference_cpu_freq': 0.99996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m3.txt...

Read matrix has 9 rows and 12 columns.

Input arrays: A (9, 12), B (12, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.007000 ms

xsmm-reference Time (libxsmm): 0.007000 ms

xsmm-reference No. of CPU cycles: 7000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0070000000000000001

xsmm-reference avg execution time: 0.0070000000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1369747003 cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m3.txt...

Read matrix has 9 rows and 12 columns.

Input arrays: A (9, 12), B (12, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 9, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.008100 ms

xsmm-custom Time (libxsmm): 0.008100 ms

xsmm-custom No. of CPU cycles: 8100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0080999999999999996

xsmm-custom avg execution time: 0.0080999999999999996

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 36, 'a_rows': 9, 'a_size': 108, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.3333333333333333, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8641975308641976, 'speedup_best_over_ref': 0.8641975308641976, 'xsmm_custom_avg': 0.0081, 'xsmm_custom_best': 0.0081, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.007, 'xsmm_reference_best': 0.007, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m6.txt...

Read matrix has 18 rows and 12 columns.

Input arrays: A (18, 12), B (12, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.018500 ms

xsmm-reference Time (libxsmm): 0.018500 ms

xsmm-reference No. of CPU cycles: 18500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.018500000000000003

xsmm-reference avg execution time: 0.018500000000000003

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1083562612 cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m6.txt...

Read matrix has 18 rows and 12 columns.

Input arrays: A (18, 12), B (12, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 18, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.019733 ms

xsmm-custom Time (libxsmm): 0.019733 ms

xsmm-custom No. of CPU cycles: 19733

CPU clock speed (GHz): 0.999983

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.019733333333333332

xsmm-custom avg execution time: 0.019733333333333332

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 36, 'a_rows': 18, 'a_size': 216, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9375000000000002, 'speedup_best_over_ref': 0.9375000000000002, 'xsmm_custom_avg': 0.019733333333333332, 'xsmm_custom_best': 0.019733333333333332, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.018500000000000003, 'xsmm_reference_best': 0.018500000000000003, 'xsmm_reference_cpu_freq': 0.999983, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m132.txt...

Read matrix has 9 rows and 18 columns.

Input arrays: A (9, 18), B (18, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.009233 ms

xsmm-reference Time (libxsmm): 0.009233 ms

xsmm-reference No. of CPU cycles: 9233

CPU clock speed (GHz): 0.999964

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0092333333333333347

xsmm-reference avg execution time: 0.0092333333333333347

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1602874919 cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m132.txt...

Read matrix has 9 rows and 18 columns.

Input arrays: A (9, 18), B (18, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 9, k= 18

lda= 1024, ldb= 18, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.009333 ms

xsmm-custom Time (libxsmm): 0.009333 ms

xsmm-custom No. of CPU cycles: 9333

CPU clock speed (GHz): 0.999964

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0093333333333333341

xsmm-custom avg execution time: 0.0093333333333333341

Freeing A

Freeing B

Freeing C

{'a_cols': 18, 'a_nonzero': 48, 'a_rows': 9, 'a_size': 162, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2962962962962963, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9892857142857143, 'speedup_best_over_ref': 0.9892857142857143, 'xsmm_custom_avg': 0.009333333333333334, 'xsmm_custom_best': 0.009333333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.009233333333333335, 'xsmm_reference_best': 0.009233333333333335, 'xsmm_reference_cpu_freq': 0.999964, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m460.txt...

Read matrix has 18 rows and 9 columns.

Input arrays: A (18, 9), B (9, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.019367 ms

xsmm-reference Time (libxsmm): 0.019367 ms

xsmm-reference No. of CPU cycles: 19366

CPU clock speed (GHz): 0.999966

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.019366666666666664

xsmm-reference avg execution time: 0.019366666666666664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1129039507 cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre-lobatto/m460.txt...

Read matrix has 18 rows and 9 columns.

Input arrays: A (18, 9), B (9, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 18, k= 9

lda= 1024, ldb= 9, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.022467 ms

xsmm-custom Time (libxsmm): 0.022467 ms

xsmm-custom No. of CPU cycles: 22466

CPU clock speed (GHz): 0.999970

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.02246666666666667

xsmm-custom avg execution time: 0.02246666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 9, 'a_nonzero': 48, 'a_rows': 18, 'a_size': 162, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2962962962962963, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8620178041543024, 'speedup_best_over_ref': 0.8620178041543024, 'xsmm_custom_avg': 0.02246666666666667, 'xsmm_custom_best': 0.02246666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.019366666666666664, 'xsmm_reference_best': 0.019366666666666664, 'xsmm_reference_cpu_freq': 0.99997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m0.txt...

Read matrix has 12 rows and 9 columns.

Input arrays: A (12, 9), B (9, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.007167 ms

xsmm-reference Time (libxsmm): 0.007167 ms

xsmm-reference No. of CPU cycles: 7166

CPU clock speed (GHz): 0.999907

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0071666666666666667

xsmm-reference avg execution time: 0.0071666666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1643651380 cleaned_data/example_mats/quad/p2/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m0.txt...

Read matrix has 12 rows and 9 columns.

Input arrays: A (12, 9), B (9, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 9

lda= 1024, ldb= 9, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.007667 ms

xsmm-custom Time (libxsmm): 0.007667 ms

xsmm-custom No. of CPU cycles: 7666

CPU clock speed (GHz): 0.999913

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0076666666666666671

xsmm-custom avg execution time: 0.0076666666666666671

Freeing A

Freeing B

Freeing C

{'a_cols': 9, 'a_nonzero': 36, 'a_rows': 12, 'a_size': 108, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.3333333333333333, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9347826086956521, 'speedup_best_over_ref': 0.9347826086956521, 'xsmm_custom_avg': 0.007666666666666667, 'xsmm_custom_best': 0.007666666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.007166666666666667, 'xsmm_reference_best': 0.007166666666666667, 'xsmm_reference_cpu_freq': 0.999913, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m3.txt...

Read matrix has 9 rows and 12 columns.

Input arrays: A (9, 12), B (12, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.007000 ms

xsmm-reference Time (libxsmm): 0.006967 ms

xsmm-reference No. of CPU cycles: 6966

CPU clock speed (GHz): 0.999904

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0070000000000000001

xsmm-reference avg execution time: 0.0070000000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1133019567 cleaned_data/example_mats/quad/p2/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m3.txt...

Read matrix has 9 rows and 12 columns.

Input arrays: A (9, 12), B (12, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 9, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.008100 ms

xsmm-custom Time (libxsmm): 0.008100 ms

xsmm-custom No. of CPU cycles: 8100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0080999999999999996

xsmm-custom avg execution time: 0.0080999999999999996

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 36, 'a_rows': 9, 'a_size': 108, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.3333333333333333, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8641975308641976, 'speedup_best_over_ref': 0.8641975308641976, 'xsmm_custom_avg': 0.0081, 'xsmm_custom_best': 0.0081, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.007, 'xsmm_reference_best': 0.007, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m6.txt...

Read matrix has 18 rows and 12 columns.

Input arrays: A (18, 12), B (12, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.018100 ms

xsmm-reference Time (libxsmm): 0.018100 ms

xsmm-reference No. of CPU cycles: 18100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.018100000000000002

xsmm-reference avg execution time: 0.018100000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1305582691 cleaned_data/example_mats/quad/p2/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m6.txt...

Read matrix has 18 rows and 12 columns.

Input arrays: A (18, 12), B (12, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 18, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.019800 ms

xsmm-custom Time (libxsmm): 0.019800 ms

xsmm-custom No. of CPU cycles: 19800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.019799999999999998

xsmm-custom avg execution time: 0.019799999999999998

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 36, 'a_rows': 18, 'a_size': 216, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9141414141414143, 'speedup_best_over_ref': 0.9141414141414143, 'xsmm_custom_avg': 0.019799999999999998, 'xsmm_custom_best': 0.019799999999999998, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0181, 'xsmm_reference_best': 0.0181, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m132.txt...

Read matrix has 9 rows and 18 columns.

Input arrays: A (9, 18), B (18, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.009367 ms

xsmm-reference Time (libxsmm): 0.009367 ms

xsmm-reference No. of CPU cycles: 9366

CPU clock speed (GHz): 0.999929

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0093666666666666672

xsmm-reference avg execution time: 0.0093666666666666672

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1051070774 cleaned_data/example_mats/quad/p2/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m132.txt...

Read matrix has 9 rows and 18 columns.

Input arrays: A (9, 18), B (18, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 9, k= 18

lda= 1024, ldb= 18, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.009833 ms

xsmm-custom Time (libxsmm): 0.009833 ms

xsmm-custom No. of CPU cycles: 9833

CPU clock speed (GHz): 0.999966

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0098333333333333328

xsmm-custom avg execution time: 0.0098333333333333328

Freeing A

Freeing B

Freeing C

{'a_cols': 18, 'a_nonzero': 48, 'a_rows': 9, 'a_size': 162, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2962962962962963, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.952542372881356, 'speedup_best_over_ref': 0.952542372881356, 'xsmm_custom_avg': 0.009833333333333333, 'xsmm_custom_best': 0.009833333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.009366666666666667, 'xsmm_reference_best': 0.009366666666666667, 'xsmm_reference_cpu_freq': 0.999966, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m460.txt...

Read matrix has 18 rows and 9 columns.

Input arrays: A (18, 9), B (9, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.019333 ms

xsmm-reference Time (libxsmm): 0.019333 ms

xsmm-reference No. of CPU cycles: 19333

CPU clock speed (GHz): 0.999983

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.019333333333333331

xsmm-reference avg execution time: 0.019333333333333331

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 324797752 cleaned_data/example_mats/quad/p2/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p2/gauss-legendre/m460.txt...

Read matrix has 18 rows and 9 columns.

Input arrays: A (18, 9), B (9, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 18, k= 9

lda= 1024, ldb= 9, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.020667 ms

xsmm-custom Time (libxsmm): 0.020700 ms

xsmm-custom No. of CPU cycles: 20700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.020666666666666667

xsmm-custom avg execution time: 0.020666666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 9, 'a_nonzero': 48, 'a_rows': 18, 'a_size': 162, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2962962962962963, 'mat_file': 'data/example_mats/quad/p2/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9354838709677418, 'speedup_best_over_ref': 0.9354838709677418, 'xsmm_custom_avg': 0.020666666666666667, 'xsmm_custom_best': 0.020666666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.01933333333333333, 'xsmm_reference_best': 0.01933333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m0.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.019567 ms

xsmm-reference Time (libxsmm): 0.019567 ms

xsmm-reference No. of CPU cycles: 19566

CPU clock speed (GHz): 0.999966

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.019566666666666666

xsmm-reference avg execution time: 0.019566666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1095956196 cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m0.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 16, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 16

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.021333 ms

xsmm-custom Time (libxsmm): 0.021333 ms

xsmm-custom No. of CPU cycles: 21333

CPU clock speed (GHz): 0.999984

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.021333333333333333

xsmm-custom avg execution time: 0.021333333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 16, 'a_rows': 16, 'a_size': 256, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.0625, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9171875, 'speedup_best_over_ref': 0.9171875, 'xsmm_custom_avg': 0.021333333333333333, 'xsmm_custom_best': 0.021333333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.019566666666666666, 'xsmm_reference_best': 0.019566666666666666, 'xsmm_reference_cpu_freq': 0.999984, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m3.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.019567 ms

xsmm-reference Time (libxsmm): 0.019567 ms

xsmm-reference No. of CPU cycles: 19566

CPU clock speed (GHz): 0.999966

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.019566666666666666

xsmm-reference avg execution time: 0.019566666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 154815346 cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m3.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 16, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 16

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.021633 ms

xsmm-custom Time (libxsmm): 0.021633 ms

xsmm-custom No. of CPU cycles: 21633

CPU clock speed (GHz): 0.999985

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.021633333333333334

xsmm-custom avg execution time: 0.021633333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 64, 'a_rows': 16, 'a_size': 256, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9044684129429892, 'speedup_best_over_ref': 0.9044684129429892, 'xsmm_custom_avg': 0.021633333333333334, 'xsmm_custom_best': 0.021633333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.019566666666666666, 'xsmm_reference_best': 0.019566666666666666, 'xsmm_reference_cpu_freq': 0.999985, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m6.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.051933 ms

xsmm-reference Time (libxsmm): 0.051933 ms

xsmm-reference No. of CPU cycles: 51933

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.051933333333333338

xsmm-reference avg execution time: 0.051933333333333338

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1555687155 cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m6.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 32, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 32

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.056733 ms

xsmm-custom Time (libxsmm): 0.056733 ms

xsmm-custom No. of CPU cycles: 56733

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.05673333333333333

xsmm-custom avg execution time: 0.05673333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 64, 'a_rows': 32, 'a_size': 512, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.125, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9153936545240895, 'speedup_best_over_ref': 0.9153936545240895, 'xsmm_custom_avg': 0.05673333333333333, 'xsmm_custom_best': 0.05673333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.05193333333333334, 'xsmm_reference_best': 0.05193333333333334, 'xsmm_reference_cpu_freq': 0.999994, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m132.txt...

Read matrix has 16 rows and 32 columns.

Input arrays: A (16, 32), B (32, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.033633 ms

xsmm-reference Time (libxsmm): 0.033633 ms

xsmm-reference No. of CPU cycles: 33633

CPU clock speed (GHz): 0.999990

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.033633333333333328

xsmm-reference avg execution time: 0.033633333333333328

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 667933013 cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m132.txt...

Read matrix has 16 rows and 32 columns.

Input arrays: A (16, 32), B (32, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 16, k= 32

lda= 1024, ldb= 32, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 16

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.037033 ms

xsmm-custom Time (libxsmm): 0.037033 ms

xsmm-custom No. of CPU cycles: 37033

CPU clock speed (GHz): 0.999991

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.037033333333333335

xsmm-custom avg execution time: 0.037033333333333335

Freeing A

Freeing B

Freeing C

{'a_cols': 32, 'a_nonzero': 112, 'a_rows': 16, 'a_size': 512, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.21875, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.908190819081908, 'speedup_best_over_ref': 0.908190819081908, 'xsmm_custom_avg': 0.037033333333333335, 'xsmm_custom_best': 0.037033333333333335, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.03363333333333333, 'xsmm_reference_best': 0.03363333333333333, 'xsmm_reference_cpu_freq': 0.999991, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m460.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.052267 ms

xsmm-reference Time (libxsmm): 0.052267 ms

xsmm-reference No. of CPU cycles: 52266

CPU clock speed (GHz): 0.999987

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.05226666666666667

xsmm-reference avg execution time: 0.05226666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1618383756 cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre-lobatto/m460.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 32, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 32

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.056700 ms

xsmm-custom Time (libxsmm): 0.056700 ms

xsmm-custom No. of CPU cycles: 56700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0567

xsmm-custom avg execution time: 0.0567

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 112, 'a_rows': 32, 'a_size': 512, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.21875, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9218106995884774, 'speedup_best_over_ref': 0.9218106995884774, 'xsmm_custom_avg': 0.0567, 'xsmm_custom_best': 0.0567, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.05226666666666667, 'xsmm_reference_best': 0.05226666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m0.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.017100 ms

xsmm-reference Time (libxsmm): 0.017100 ms

xsmm-reference No. of CPU cycles: 17100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.017100000000000001

xsmm-reference avg execution time: 0.017100000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2132728800 cleaned_data/example_mats/quad/p3/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m0.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 16, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 16

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.018433 ms

xsmm-custom Time (libxsmm): 0.018400 ms

xsmm-custom No. of CPU cycles: 18400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.018433333333333336

xsmm-custom avg execution time: 0.018433333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 64, 'a_rows': 16, 'a_size': 256, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9276672694394212, 'speedup_best_over_ref': 0.9276672694394212, 'xsmm_custom_avg': 0.018433333333333336, 'xsmm_custom_best': 0.018433333333333336, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0171, 'xsmm_reference_best': 0.0171, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m3.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.018233 ms

xsmm-reference Time (libxsmm): 0.018233 ms

xsmm-reference No. of CPU cycles: 18233

CPU clock speed (GHz): 0.999982

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.018233333333333334

xsmm-reference avg execution time: 0.018233333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1761802577 cleaned_data/example_mats/quad/p3/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m3.txt...

Read matrix has 16 rows and 16 columns.

Input arrays: A (16, 16), B (16, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 16, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 16

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.021467 ms

xsmm-custom Time (libxsmm): 0.021467 ms

xsmm-custom No. of CPU cycles: 21466

CPU clock speed (GHz): 0.999969

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.021466666666666669

xsmm-custom avg execution time: 0.021466666666666669

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 64, 'a_rows': 16, 'a_size': 256, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8493788819875776, 'speedup_best_over_ref': 0.8493788819875776, 'xsmm_custom_avg': 0.02146666666666667, 'xsmm_custom_best': 0.02146666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.018233333333333334, 'xsmm_reference_best': 0.018233333333333334, 'xsmm_reference_cpu_freq': 0.999969, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m6.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.052000 ms

xsmm-reference Time (libxsmm): 0.052000 ms

xsmm-reference No. of CPU cycles: 52000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.052000000000000005

xsmm-reference avg execution time: 0.052000000000000005

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 842826766 cleaned_data/example_mats/quad/p3/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m6.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 32, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 32

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.056767 ms

xsmm-custom Time (libxsmm): 0.056767 ms

xsmm-custom No. of CPU cycles: 56766

CPU clock speed (GHz): 0.999988

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.056766666666666667

xsmm-custom avg execution time: 0.056766666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 64, 'a_rows': 32, 'a_size': 512, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.125, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9160305343511451, 'speedup_best_over_ref': 0.9160305343511451, 'xsmm_custom_avg': 0.05676666666666667, 'xsmm_custom_best': 0.05676666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.052000000000000005, 'xsmm_reference_best': 0.052000000000000005, 'xsmm_reference_cpu_freq': 0.999988, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m132.txt...

Read matrix has 16 rows and 32 columns.

Input arrays: A (16, 32), B (32, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.028067 ms

xsmm-reference Time (libxsmm): 0.028067 ms

xsmm-reference No. of CPU cycles: 28066

CPU clock speed (GHz): 0.999976

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.028066666666666667

xsmm-reference avg execution time: 0.028066666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1447895469 cleaned_data/example_mats/quad/p3/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m132.txt...

Read matrix has 16 rows and 32 columns.

Input arrays: A (16, 32), B (32, 1024).

Output array: C (16, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 16, k= 32

lda= 1024, ldb= 32, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 16

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.028167 ms

xsmm-custom Time (libxsmm): 0.028133 ms

xsmm-custom No. of CPU cycles: 28133

CPU clock speed (GHz): 0.999988

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.028166666666666666

xsmm-custom avg execution time: 0.028166666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 32, 'a_nonzero': 128, 'a_rows': 16, 'a_size': 512, 'a_unique': 8, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9964497041420118, 'speedup_best_over_ref': 0.9964497041420118, 'xsmm_custom_avg': 0.028166666666666666, 'xsmm_custom_best': 0.028166666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.028066666666666667, 'xsmm_reference_best': 0.028066666666666667, 'xsmm_reference_cpu_freq': 0.999988, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m460.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.052033 ms

xsmm-reference Time (libxsmm): 0.052033 ms

xsmm-reference No. of CPU cycles: 52033

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.052033333333333334

xsmm-reference avg execution time: 0.052033333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 991946440 cleaned_data/example_mats/quad/p3/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p3/gauss-legendre/m460.txt...

Read matrix has 32 rows and 16 columns.

Input arrays: A (32, 16), B (16, 1024).

Output array: C (32, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 32, k= 16

lda= 1024, ldb= 16, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 32

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.056867 ms

xsmm-custom Time (libxsmm): 0.056867 ms

xsmm-custom No. of CPU cycles: 56866

CPU clock speed (GHz): 0.999988

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.056866666666666663

xsmm-custom avg execution time: 0.056866666666666663

Freeing A

Freeing B

Freeing C

{'a_cols': 16, 'a_nonzero': 128, 'a_rows': 32, 'a_size': 512, 'a_unique': 8, 'alpha': 1.0, 'beta': 0.0, 'density': 0.25, 'mat_file': 'data/example_mats/quad/p3/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9150058616647129, 'speedup_best_over_ref': 0.9150058616647129, 'xsmm_custom_avg': 0.05686666666666666, 'xsmm_custom_best': 0.05686666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.052033333333333334, 'xsmm_reference_best': 0.052033333333333334, 'xsmm_reference_cpu_freq': 0.999988, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m0.txt...

Read matrix has 20 rows and 25 columns.

Input arrays: A (20, 25), B (25, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.036500 ms

xsmm-reference Time (libxsmm): 0.036500 ms

xsmm-reference No. of CPU cycles: 36500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.036499999999999998

xsmm-reference avg execution time: 0.036499999999999998

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 768269824 cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m0.txt...

Read matrix has 20 rows and 25 columns.

Input arrays: A (20, 25), B (25, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 20, k= 25

lda= 1024, ldb= 25, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.039967 ms

xsmm-custom Time (libxsmm): 0.039967 ms

xsmm-custom No. of CPU cycles: 39966

CPU clock speed (GHz): 0.999983

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.039966666666666671

xsmm-custom avg execution time: 0.039966666666666671

Freeing A

Freeing B

Freeing C

{'a_cols': 25, 'a_nonzero': 20, 'a_rows': 20, 'a_size': 500, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.04, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9132610508757296, 'speedup_best_over_ref': 0.9132610508757296, 'xsmm_custom_avg': 0.03996666666666667, 'xsmm_custom_best': 0.03996666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0365, 'xsmm_reference_best': 0.0365, 'xsmm_reference_cpu_freq': 0.999983, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m3.txt...

Read matrix has 25 rows and 20 columns.

Input arrays: A (25, 20), B (20, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.046667 ms

xsmm-reference Time (libxsmm): 0.046667 ms

xsmm-reference No. of CPU cycles: 46666

CPU clock speed (GHz): 0.999986

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.046666666666666662

xsmm-reference avg execution time: 0.046666666666666662

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1084644974 cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m3.txt...

Read matrix has 25 rows and 20 columns.

Input arrays: A (25, 20), B (20, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 25, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.046900 ms

xsmm-custom Time (libxsmm): 0.046900 ms

xsmm-custom No. of CPU cycles: 46900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.046900000000000004

xsmm-custom avg execution time: 0.046900000000000004

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 100, 'a_rows': 25, 'a_size': 500, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9950248756218903, 'speedup_best_over_ref': 0.9950248756218903, 'xsmm_custom_avg': 0.046900000000000004, 'xsmm_custom_best': 0.046900000000000004, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.04666666666666666, 'xsmm_reference_best': 0.04666666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m6.txt...

Read matrix has 50 rows and 20 columns.

Input arrays: A (50, 20), B (20, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.083667 ms

xsmm-reference Time (libxsmm): 0.083633 ms

xsmm-reference No. of CPU cycles: 83633

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.083666666666666653

xsmm-reference avg execution time: 0.083666666666666653

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1411421145 cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m6.txt...

Read matrix has 50 rows and 20 columns.

Input arrays: A (50, 20), B (20, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 50, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.090800 ms

xsmm-custom Time (libxsmm): 0.090800 ms

xsmm-custom No. of CPU cycles: 90800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.090800000000000006

xsmm-custom avg execution time: 0.090800000000000006

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 100, 'a_rows': 50, 'a_size': 1000, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9214390602055799, 'speedup_best_over_ref': 0.9214390602055799, 'xsmm_custom_avg': 0.0908, 'xsmm_custom_best': 0.0908, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.08366666666666665, 'xsmm_reference_best': 0.08366666666666665, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m132.txt...

Read matrix has 25 rows and 50 columns.

Input arrays: A (25, 50), B (50, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.071000 ms

xsmm-reference Time (libxsmm): 0.070967 ms

xsmm-reference No. of CPU cycles: 70966

CPU clock speed (GHz): 0.999991

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.070999999999999994

xsmm-reference avg execution time: 0.070999999999999994

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1440840606 cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m132.txt...

Read matrix has 25 rows and 50 columns.

Input arrays: A (25, 50), B (50, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 25, k= 50

lda= 1024, ldb= 50, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.076700 ms

xsmm-custom Time (libxsmm): 0.076700 ms

xsmm-custom No. of CPU cycles: 76700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.076700000000000004

xsmm-custom avg execution time: 0.076700000000000004

Freeing A

Freeing B

Freeing C

{'a_cols': 50, 'a_nonzero': 220, 'a_rows': 25, 'a_size': 1250, 'a_unique': 11, 'alpha': 1.0, 'beta': 0.0, 'density': 0.176, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9256844850065188, 'speedup_best_over_ref': 0.9256844850065188, 'xsmm_custom_avg': 0.0767, 'xsmm_custom_best': 0.0767, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.071, 'xsmm_reference_best': 0.071, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m460.txt...

Read matrix has 50 rows and 25 columns.

Input arrays: A (50, 25), B (25, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.109167 ms

xsmm-reference Time (libxsmm): 0.109133 ms

xsmm-reference No. of CPU cycles: 109133

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.10916666666666666

xsmm-reference avg execution time: 0.10916666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 905814197 cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre-lobatto/m460.txt...

Read matrix has 50 rows and 25 columns.

Input arrays: A (50, 25), B (25, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 50, k= 25

lda= 1024, ldb= 25, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.109100 ms

xsmm-custom Time (libxsmm): 0.109100 ms

xsmm-custom No. of CPU cycles: 109100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.1091

xsmm-custom avg execution time: 0.1091

Freeing A

Freeing B

Freeing C

{'a_cols': 25, 'a_nonzero': 220, 'a_rows': 50, 'a_size': 1250, 'a_unique': 11, 'alpha': 1.0, 'beta': 0.0, 'density': 0.176, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0006110601894287, 'speedup_best_over_ref': 1.0006110601894287, 'xsmm_custom_avg': 0.1091, 'xsmm_custom_best': 0.1091, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.10916666666666666, 'xsmm_reference_best': 0.10916666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m0.txt...

Read matrix has 20 rows and 25 columns.

Input arrays: A (20, 25), B (25, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.036533 ms

xsmm-reference Time (libxsmm): 0.036533 ms

xsmm-reference No. of CPU cycles: 36533

CPU clock speed (GHz): 0.999991

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.036533333333333334

xsmm-reference avg execution time: 0.036533333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 479758964 cleaned_data/example_mats/quad/p4/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m0.txt...

Read matrix has 20 rows and 25 columns.

Input arrays: A (20, 25), B (25, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 20, k= 25

lda= 1024, ldb= 25, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.040100 ms

xsmm-custom Time (libxsmm): 0.040067 ms

xsmm-custom No. of CPU cycles: 40066

CPU clock speed (GHz): 0.999983

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.040100000000000004

xsmm-custom avg execution time: 0.040100000000000004

Freeing A

Freeing B

Freeing C

{'a_cols': 25, 'a_nonzero': 100, 'a_rows': 20, 'a_size': 500, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9110556940980881, 'speedup_best_over_ref': 0.9110556940980881, 'xsmm_custom_avg': 0.040100000000000004, 'xsmm_custom_best': 0.040100000000000004, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.036533333333333334, 'xsmm_reference_best': 0.036533333333333334, 'xsmm_reference_cpu_freq': 0.999983, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m3.txt...

Read matrix has 25 rows and 20 columns.

Input arrays: A (25, 20), B (20, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.042967 ms

xsmm-reference Time (libxsmm): 0.042933 ms

xsmm-reference No. of CPU cycles: 42933

CPU clock speed (GHz): 0.999992

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.042966666666666667

xsmm-reference avg execution time: 0.042966666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1932165035 cleaned_data/example_mats/quad/p4/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m3.txt...

Read matrix has 25 rows and 20 columns.

Input arrays: A (25, 20), B (20, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 25, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.047033 ms

xsmm-custom Time (libxsmm): 0.047033 ms

xsmm-custom No. of CPU cycles: 47033

CPU clock speed (GHz): 0.999993

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.047033333333333337

xsmm-custom avg execution time: 0.047033333333333337

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 100, 'a_rows': 25, 'a_size': 500, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.2, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9135364989369241, 'speedup_best_over_ref': 0.9135364989369241, 'xsmm_custom_avg': 0.04703333333333334, 'xsmm_custom_best': 0.04703333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.04296666666666667, 'xsmm_reference_best': 0.04296666666666667, 'xsmm_reference_cpu_freq': 0.999993, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m6.txt...

Read matrix has 50 rows and 20 columns.

Input arrays: A (50, 20), B (20, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.096367 ms

xsmm-reference Time (libxsmm): 0.096400 ms

xsmm-reference No. of CPU cycles: 96400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.09636666666666667

xsmm-reference avg execution time: 0.09636666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1677277632 cleaned_data/example_mats/quad/p4/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m6.txt...

Read matrix has 50 rows and 20 columns.

Input arrays: A (50, 20), B (20, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 50, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.104667 ms

xsmm-custom Time (libxsmm): 0.104667 ms

xsmm-custom No. of CPU cycles: 104666

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.10466666666666667

xsmm-custom avg execution time: 0.10466666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 100, 'a_rows': 50, 'a_size': 1000, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9207006369426751, 'speedup_best_over_ref': 0.9207006369426751, 'xsmm_custom_avg': 0.10466666666666667, 'xsmm_custom_best': 0.10466666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.09636666666666667, 'xsmm_reference_best': 0.09636666666666667, 'xsmm_reference_cpu_freq': 0.999994, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m132.txt...

Read matrix has 25 rows and 50 columns.

Input arrays: A (25, 50), B (50, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.075800 ms

xsmm-reference Time (libxsmm): 0.075800 ms

xsmm-reference No. of CPU cycles: 75800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.075800000000000006

xsmm-reference avg execution time: 0.075800000000000006

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 390733290 cleaned_data/example_mats/quad/p4/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m132.txt...

Read matrix has 25 rows and 50 columns.

Input arrays: A (25, 50), B (50, 1024).

Output array: C (25, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 25, k= 50

lda= 1024, ldb= 50, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.082900 ms

xsmm-custom Time (libxsmm): 0.082900 ms

xsmm-custom No. of CPU cycles: 82900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.082900000000000001

xsmm-custom avg execution time: 0.082900000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 50, 'a_nonzero': 240, 'a_rows': 25, 'a_size': 1250, 'a_unique': 12, 'alpha': 1.0, 'beta': 0.0, 'density': 0.192, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9143546441495779, 'speedup_best_over_ref': 0.9143546441495779, 'xsmm_custom_avg': 0.0829, 'xsmm_custom_best': 0.0829, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0758, 'xsmm_reference_best': 0.0758, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m460.txt...

Read matrix has 50 rows and 25 columns.

Input arrays: A (50, 25), B (25, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.108833 ms

xsmm-reference Time (libxsmm): 0.108833 ms

xsmm-reference No. of CPU cycles: 108833

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.10883333333333334

xsmm-reference avg execution time: 0.10883333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 733514534 cleaned_data/example_mats/quad/p4/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p4/gauss-legendre/m460.txt...

Read matrix has 50 rows and 25 columns.

Input arrays: A (50, 25), B (25, 1024).

Output array: C (50, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 50, k= 25

lda= 1024, ldb= 25, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.119467 ms

xsmm-custom Time (libxsmm): 0.119467 ms

xsmm-custom No. of CPU cycles: 119466

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.11946666666666667

xsmm-custom avg execution time: 0.11946666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 25, 'a_nonzero': 240, 'a_rows': 50, 'a_size': 1250, 'a_unique': 12, 'alpha': 1.0, 'beta': 0.0, 'density': 0.192, 'mat_file': 'data/example_mats/quad/p4/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9109933035714286, 'speedup_best_over_ref': 0.9109933035714286, 'xsmm_custom_avg': 0.11946666666666667, 'xsmm_custom_best': 0.11946666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.10883333333333334, 'xsmm_reference_best': 0.10883333333333334, 'xsmm_reference_cpu_freq': 0.999994, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m0.txt...

Read matrix has 24 rows and 36 columns.

Input arrays: A (24, 36), B (36, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.056667 ms

xsmm-reference Time (libxsmm): 0.056667 ms

xsmm-reference No. of CPU cycles: 56666

CPU clock speed (GHz): 0.999988

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.056666666666666664

xsmm-reference avg execution time: 0.056666666666666664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1817093174 cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m0.txt...

Read matrix has 24 rows and 36 columns.

Input arrays: A (24, 36), B (36, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 24, k= 36

lda= 1024, ldb= 36, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 24

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.062700 ms

xsmm-custom Time (libxsmm): 0.062700 ms

xsmm-custom No. of CPU cycles: 62700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.062700000000000006

xsmm-custom avg execution time: 0.062700000000000006

Freeing A

Freeing B

Freeing C

{'a_cols': 36, 'a_nonzero': 24, 'a_rows': 24, 'a_size': 864, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.027777777777777776, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9037745879851141, 'speedup_best_over_ref': 0.9037745879851141, 'xsmm_custom_avg': 0.0627, 'xsmm_custom_best': 0.0627, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.056666666666666664, 'xsmm_reference_best': 0.056666666666666664, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m3.txt...

Read matrix has 36 rows and 24 columns.

Input arrays: A (36, 24), B (24, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.068700 ms

xsmm-reference Time (libxsmm): 0.068700 ms

xsmm-reference No. of CPU cycles: 68700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.068699999999999997

xsmm-reference avg execution time: 0.068699999999999997

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 925896258 cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m3.txt...

Read matrix has 36 rows and 24 columns.

Input arrays: A (36, 24), B (24, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 36, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.074633 ms

xsmm-custom Time (libxsmm): 0.074667 ms

xsmm-custom No. of CPU cycles: 74666

CPU clock speed (GHz): 0.999991

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.074633333333333329

xsmm-custom avg execution time: 0.074633333333333329

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 144, 'a_rows': 36, 'a_size': 864, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9205002233139795, 'speedup_best_over_ref': 0.9205002233139795, 'xsmm_custom_avg': 0.07463333333333333, 'xsmm_custom_best': 0.07463333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0687, 'xsmm_reference_best': 0.0687, 'xsmm_reference_cpu_freq': 0.999991, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m6.txt...

Read matrix has 72 rows and 24 columns.

Input arrays: A (72, 24), B (24, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.153533 ms

xsmm-reference Time (libxsmm): 0.153567 ms

xsmm-reference No. of CPU cycles: 153566

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.15353333333333333

xsmm-reference avg execution time: 0.15353333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 516892917 cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m6.txt...

Read matrix has 72 rows and 24 columns.

Input arrays: A (72, 24), B (24, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 72, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 72

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.153667 ms

xsmm-custom Time (libxsmm): 0.153633 ms

xsmm-custom No. of CPU cycles: 153633

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.15366666666666667

xsmm-custom avg execution time: 0.15366666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 144, 'a_rows': 72, 'a_size': 1728, 'a_unique': 4, 'alpha': 1.0, 'beta': 0.0, 'density': 0.08333333333333333, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9991323210412146, 'speedup_best_over_ref': 0.9991323210412146, 'xsmm_custom_avg': 0.15366666666666667, 'xsmm_custom_best': 0.15366666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.15353333333333333, 'xsmm_reference_best': 0.15353333333333333, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m132.txt...

Read matrix has 36 rows and 72 columns.

Input arrays: A (36, 72), B (72, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.163433 ms

xsmm-reference Time (libxsmm): 0.163433 ms

xsmm-reference No. of CPU cycles: 163433

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.16343333333333332

xsmm-reference avg execution time: 0.16343333333333332

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 258191734 cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m132.txt...

Read matrix has 36 rows and 72 columns.

Input arrays: A (36, 72), B (72, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 36, k= 72

lda= 1024, ldb= 72, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.174200 ms

xsmm-custom Time (libxsmm): 0.174167 ms

xsmm-custom No. of CPU cycles: 174166

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.17419999999999999

xsmm-custom avg execution time: 0.17419999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 72, 'a_nonzero': 384, 'a_rows': 36, 'a_size': 2592, 'a_unique': 16, 'alpha': 1.0, 'beta': 0.0, 'density': 0.14814814814814814, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.938193647148871, 'speedup_best_over_ref': 0.938193647148871, 'xsmm_custom_avg': 0.1742, 'xsmm_custom_best': 0.1742, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.16343333333333332, 'xsmm_reference_best': 0.16343333333333332, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m460.txt...

Read matrix has 72 rows and 36 columns.

Input arrays: A (72, 36), B (36, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.186633 ms

xsmm-reference Time (libxsmm): 0.186633 ms

xsmm-reference No. of CPU cycles: 186633

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.18663333333333335

xsmm-reference avg execution time: 0.18663333333333335

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 519937104 cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre-lobatto/m460.txt...

Read matrix has 72 rows and 36 columns.

Input arrays: A (72, 36), B (36, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 72, k= 36

lda= 1024, ldb= 36, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 72

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.181900 ms

xsmm-custom Time (libxsmm): 0.181900 ms

xsmm-custom No. of CPU cycles: 181900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.18190000000000001

xsmm-custom avg execution time: 0.18190000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 36, 'a_nonzero': 384, 'a_rows': 72, 'a_size': 2592, 'a_unique': 16, 'alpha': 1.0, 'beta': 0.0, 'density': 0.14814814814814814, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0260216236027122, 'speedup_best_over_ref': 1.0260216236027122, 'xsmm_custom_avg': 0.1819, 'xsmm_custom_best': 0.1819, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.18663333333333335, 'xsmm_reference_best': 0.18663333333333335, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m0.txt...

Read matrix has 24 rows and 36 columns.

Input arrays: A (24, 36), B (36, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.052167 ms

xsmm-reference Time (libxsmm): 0.052167 ms

xsmm-reference No. of CPU cycles: 52166

CPU clock speed (GHz): 0.999987

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.052166666666666667

xsmm-reference avg execution time: 0.052166666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1802820979 cleaned_data/example_mats/quad/p5/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m0.txt...

Read matrix has 24 rows and 36 columns.

Input arrays: A (24, 36), B (36, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 24, k= 36

lda= 1024, ldb= 36, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 24

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.057400 ms

xsmm-custom Time (libxsmm): 0.057400 ms

xsmm-custom No. of CPU cycles: 57400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0574

xsmm-custom avg execution time: 0.0574

Freeing A

Freeing B

Freeing C

{'a_cols': 36, 'a_nonzero': 144, 'a_rows': 24, 'a_size': 864, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9088269454123112, 'speedup_best_over_ref': 0.9088269454123112, 'xsmm_custom_avg': 0.0574, 'xsmm_custom_best': 0.0574, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.05216666666666667, 'xsmm_reference_best': 0.05216666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m3.txt...

Read matrix has 36 rows and 24 columns.

Input arrays: A (36, 24), B (24, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.068633 ms

xsmm-reference Time (libxsmm): 0.068633 ms

xsmm-reference No. of CPU cycles: 68633

CPU clock speed (GHz): 0.999995

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.068633333333333338

xsmm-reference avg execution time: 0.068633333333333338

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 366876137 cleaned_data/example_mats/quad/p5/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m3.txt...

Read matrix has 36 rows and 24 columns.

Input arrays: A (36, 24), B (24, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 36, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.074533 ms

xsmm-custom Time (libxsmm): 0.074533 ms

xsmm-custom No. of CPU cycles: 74533

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.07453333333333334

xsmm-custom avg execution time: 0.07453333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 144, 'a_rows': 36, 'a_size': 864, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9208407871198568, 'speedup_best_over_ref': 0.9208407871198568, 'xsmm_custom_avg': 0.07453333333333334, 'xsmm_custom_best': 0.07453333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.06863333333333334, 'xsmm_reference_best': 0.06863333333333334, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m6.txt...

Read matrix has 72 rows and 24 columns.

Input arrays: A (72, 24), B (24, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.153367 ms

xsmm-reference Time (libxsmm): 0.153367 ms

xsmm-reference No. of CPU cycles: 153366

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.15336666666666668

xsmm-reference avg execution time: 0.15336666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 667051782 cleaned_data/example_mats/quad/p5/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m6.txt...

Read matrix has 72 rows and 24 columns.

Input arrays: A (72, 24), B (24, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 72, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 72

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.166467 ms

xsmm-custom Time (libxsmm): 0.166467 ms

xsmm-custom No. of CPU cycles: 166466

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.16646666666666665

xsmm-custom avg execution time: 0.16646666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 144, 'a_rows': 72, 'a_size': 1728, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 0.08333333333333333, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9213055666800162, 'speedup_best_over_ref': 0.9213055666800162, 'xsmm_custom_avg': 0.16646666666666665, 'xsmm_custom_best': 0.16646666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.15336666666666668, 'xsmm_reference_best': 0.15336666666666668, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m132.txt...

Read matrix has 36 rows and 72 columns.

Input arrays: A (36, 72), B (72, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.136300 ms

xsmm-reference Time (libxsmm): 0.136300 ms

xsmm-reference No. of CPU cycles: 136300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.1363

xsmm-reference avg execution time: 0.1363

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 665935153 cleaned_data/example_mats/quad/p5/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m132.txt...

Read matrix has 36 rows and 72 columns.

Input arrays: A (36, 72), B (72, 1024).

Output array: C (36, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 36, k= 72

lda= 1024, ldb= 72, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.141567 ms

xsmm-custom Time (libxsmm): 0.141567 ms

xsmm-custom No. of CPU cycles: 141566

CPU clock speed (GHz): 0.999995

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.14156666666666667

xsmm-custom avg execution time: 0.14156666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 72, 'a_nonzero': 432, 'a_rows': 36, 'a_size': 2592, 'a_unique': 18, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9627972686602307, 'speedup_best_over_ref': 0.9627972686602307, 'xsmm_custom_avg': 0.14156666666666667, 'xsmm_custom_best': 0.14156666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1363, 'xsmm_reference_best': 0.1363, 'xsmm_reference_cpu_freq': 0.999995, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m460.txt...

Read matrix has 72 rows and 36 columns.

Input arrays: A (72, 36), B (36, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.151067 ms

xsmm-reference Time (libxsmm): 0.151067 ms

xsmm-reference No. of CPU cycles: 151066

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.15106666666666665

xsmm-reference avg execution time: 0.15106666666666665

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 163491866 cleaned_data/example_mats/quad/p5/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p5/gauss-legendre/m460.txt...

Read matrix has 72 rows and 36 columns.

Input arrays: A (72, 36), B (36, 1024).

Output array: C (72, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 72, k= 36

lda= 1024, ldb= 36, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 72

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.162667 ms

xsmm-custom Time (libxsmm): 0.162667 ms

xsmm-custom No. of CPU cycles: 162666

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.16266666666666665

xsmm-custom avg execution time: 0.16266666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 36, 'a_nonzero': 432, 'a_rows': 72, 'a_size': 2592, 'a_unique': 18, 'alpha': 1.0, 'beta': 0.0, 'density': 0.16666666666666666, 'mat_file': 'data/example_mats/quad/p5/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9286885245901639, 'speedup_best_over_ref': 0.9286885245901639, 'xsmm_custom_avg': 0.16266666666666665, 'xsmm_custom_best': 0.16266666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.15106666666666665, 'xsmm_reference_best': 0.15106666666666665, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m0.txt...

Read matrix has 28 rows and 49 columns.

Input arrays: A (28, 49), B (49, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.077033 ms

xsmm-reference Time (libxsmm): 0.077033 ms

xsmm-reference No. of CPU cycles: 77033

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.077033333333333329

xsmm-reference avg execution time: 0.077033333333333329

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 37091926 cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m0.txt...

Read matrix has 28 rows and 49 columns.

Input arrays: A (28, 49), B (49, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 28, k= 49

lda= 1024, ldb= 49, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.083067 ms

xsmm-custom Time (libxsmm): 0.083067 ms

xsmm-custom No. of CPU cycles: 83066

CPU clock speed (GHz): 0.999992

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.083066666666666664

xsmm-custom avg execution time: 0.083066666666666664

Freeing A

Freeing B

Freeing C

{'a_cols': 49, 'a_nonzero': 28, 'a_rows': 28, 'a_size': 1372, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.02040816326530612, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre-lobatto/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9273675762439807, 'speedup_best_over_ref': 0.9273675762439807, 'xsmm_custom_avg': 0.08306666666666666, 'xsmm_custom_best': 0.08306666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.07703333333333333, 'xsmm_reference_best': 0.07703333333333333, 'xsmm_reference_cpu_freq': 0.999992, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m3.txt...

Read matrix has 49 rows and 28 columns.

Input arrays: A (49, 28), B (28, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.112200 ms

xsmm-reference Time (libxsmm): 0.112200 ms

xsmm-reference No. of CPU cycles: 112200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.11220000000000001

xsmm-reference avg execution time: 0.11220000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 985354022 cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m3.txt...

Read matrix has 49 rows and 28 columns.

Input arrays: A (49, 28), B (28, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 49, k= 28

lda= 1024, ldb= 28, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.122333 ms

xsmm-custom Time (libxsmm): 0.122300 ms

xsmm-custom No. of CPU cycles: 122300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.12233333333333334

xsmm-custom avg execution time: 0.12233333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 28, 'a_nonzero': 196, 'a_rows': 49, 'a_size': 1372, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.14285714285714285, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre-lobatto/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9171662125340599, 'speedup_best_over_ref': 0.9171662125340599, 'xsmm_custom_avg': 0.12233333333333334, 'xsmm_custom_best': 0.12233333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.11220000000000001, 'xsmm_reference_best': 0.11220000000000001, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m6.txt...

Read matrix has 98 rows and 28 columns.

Input arrays: A (98, 28), B (28, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.228867 ms

xsmm-reference Time (libxsmm): 0.228833 ms

xsmm-reference No. of CPU cycles: 228833

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.22886666666666666

xsmm-reference avg execution time: 0.22886666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1339234978 cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m6.txt...

Read matrix has 98 rows and 28 columns.

Input arrays: A (98, 28), B (28, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 98, k= 28

lda= 1024, ldb= 28, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.210233 ms

xsmm-custom Time (libxsmm): 0.210233 ms

xsmm-custom No. of CPU cycles: 210233

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.21023333333333336

xsmm-custom avg execution time: 0.21023333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 28, 'a_nonzero': 196, 'a_rows': 98, 'a_size': 2744, 'a_unique': 5, 'alpha': 1.0, 'beta': 0.0, 'density': 0.07142857142857142, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre-lobatto/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.088631679086729, 'speedup_best_over_ref': 1.088631679086729, 'xsmm_custom_avg': 0.21023333333333336, 'xsmm_custom_best': 0.21023333333333336, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.22886666666666666, 'xsmm_reference_best': 0.22886666666666666, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m132.txt...

Read matrix has 49 rows and 98 columns.

Input arrays: A (49, 98), B (98, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.239733 ms

xsmm-reference Time (libxsmm): 0.239700 ms

xsmm-reference No. of CPU cycles: 239700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.23973333333333333

xsmm-reference avg execution time: 0.23973333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 541365585 cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m132.txt...

Read matrix has 49 rows and 98 columns.

Input arrays: A (49, 98), B (98, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 49, k= 98

lda= 1024, ldb= 98, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.215167 ms

xsmm-custom Time (libxsmm): 0.215167 ms

xsmm-custom No. of CPU cycles: 215166

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.21516666666666667

xsmm-custom avg execution time: 0.21516666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 98, 'a_nonzero': 616, 'a_rows': 49, 'a_size': 4802, 'a_unique': 22, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1282798833819242, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre-lobatto/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1141750580945002, 'speedup_best_over_ref': 1.1141750580945002, 'xsmm_custom_avg': 0.21516666666666667, 'xsmm_custom_best': 0.21516666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.23973333333333333, 'xsmm_reference_best': 0.23973333333333333, 'xsmm_reference_cpu_freq': 0.999997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m460.txt...

Read matrix has 98 rows and 49 columns.

Input arrays: A (98, 49), B (49, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.284367 ms

xsmm-reference Time (libxsmm): 0.284367 ms

xsmm-reference No. of CPU cycles: 284366

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.28436666666666671

xsmm-reference avg execution time: 0.28436666666666671

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 193944404 cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre-lobatto/m460.txt...

Read matrix has 98 rows and 49 columns.

Input arrays: A (98, 49), B (49, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 98, k= 49

lda= 1024, ldb= 49, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.278800 ms

xsmm-custom Time (libxsmm): 0.278800 ms

xsmm-custom No. of CPU cycles: 278800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.27880000000000005

xsmm-custom avg execution time: 0.27880000000000005

Freeing A

Freeing B

Freeing C

{'a_cols': 49, 'a_nonzero': 616, 'a_rows': 98, 'a_size': 4802, 'a_unique': 22, 'alpha': 1.0, 'beta': 0.0, 'density': 0.1282798833819242, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre-lobatto/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0199665231946438, 'speedup_best_over_ref': 1.0199665231946438, 'xsmm_custom_avg': 0.27880000000000005, 'xsmm_custom_best': 0.27880000000000005, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.2843666666666667, 'xsmm_reference_best': 0.2843666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m0.txt...

Read matrix has 28 rows and 49 columns.

Input arrays: A (28, 49), B (49, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.082267 ms

xsmm-reference Time (libxsmm): 0.082233 ms

xsmm-reference No. of CPU cycles: 82233

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.082266666666666668

xsmm-reference avg execution time: 0.082266666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1714283797 cleaned_data/example_mats/quad/p6/gauss-legendre/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m0.txt...

Read matrix has 28 rows and 49 columns.

Input arrays: A (28, 49), B (49, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 28, k= 49

lda= 1024, ldb= 49, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.090033 ms

xsmm-custom Time (libxsmm): 0.090033 ms

xsmm-custom No. of CPU cycles: 90033

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.09003333333333334

xsmm-custom avg execution time: 0.09003333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 49, 'a_nonzero': 196, 'a_rows': 28, 'a_size': 1372, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.14285714285714285, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9137356534616808, 'speedup_best_over_ref': 0.9137356534616808, 'xsmm_custom_avg': 0.09003333333333334, 'xsmm_custom_best': 0.09003333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.08226666666666667, 'xsmm_reference_best': 0.08226666666666667, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m3.txt...

Read matrix has 49 rows and 28 columns.

Input arrays: A (49, 28), B (28, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.112667 ms

xsmm-reference Time (libxsmm): 0.112667 ms

xsmm-reference No. of CPU cycles: 112666

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.11266666666666666

xsmm-reference avg execution time: 0.11266666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1222918571 cleaned_data/example_mats/quad/p6/gauss-legendre/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m3.txt...

Read matrix has 49 rows and 28 columns.

Input arrays: A (49, 28), B (28, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 49, k= 28

lda= 1024, ldb= 28, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.121933 ms

xsmm-custom Time (libxsmm): 0.121933 ms

xsmm-custom No. of CPU cycles: 121933

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.12193333333333332

xsmm-custom avg execution time: 0.12193333333333332

Freeing A

Freeing B

Freeing C

{'a_cols': 28, 'a_nonzero': 196, 'a_rows': 49, 'a_size': 1372, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.14285714285714285, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9240021869874249, 'speedup_best_over_ref': 0.9240021869874249, 'xsmm_custom_avg': 0.12193333333333332, 'xsmm_custom_best': 0.12193333333333332, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.11266666666666666, 'xsmm_reference_best': 0.11266666666666666, 'xsmm_reference_cpu_freq': 0.999997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m6.txt...

Read matrix has 98 rows and 28 columns.

Input arrays: A (98, 28), B (28, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.217000 ms

xsmm-reference Time (libxsmm): 0.217000 ms

xsmm-reference No. of CPU cycles: 217000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.217

xsmm-reference avg execution time: 0.217

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1915637109 cleaned_data/example_mats/quad/p6/gauss-legendre/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m6.txt...

Read matrix has 98 rows and 28 columns.

Input arrays: A (98, 28), B (28, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 98, k= 28

lda= 1024, ldb= 28, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.226533 ms

xsmm-custom Time (libxsmm): 0.226533 ms

xsmm-custom No. of CPU cycles: 226533

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.22653333333333334

xsmm-custom avg execution time: 0.22653333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 28, 'a_nonzero': 196, 'a_rows': 98, 'a_size': 2744, 'a_unique': 7, 'alpha': 1.0, 'beta': 0.0, 'density': 0.07142857142857142, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9579164214243673, 'speedup_best_over_ref': 0.9579164214243673, 'xsmm_custom_avg': 0.22653333333333334, 'xsmm_custom_best': 0.22653333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.217, 'xsmm_reference_best': 0.217, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m132.txt...

Read matrix has 49 rows and 98 columns.

Input arrays: A (49, 98), B (98, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.274300 ms

xsmm-reference Time (libxsmm): 0.274300 ms

xsmm-reference No. of CPU cycles: 274300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.27429999999999999

xsmm-reference avg execution time: 0.27429999999999999

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 633859046 cleaned_data/example_mats/quad/p6/gauss-legendre/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m132.txt...

Read matrix has 49 rows and 98 columns.

Input arrays: A (49, 98), B (98, 1024).

Output array: C (49, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 49, k= 98

lda= 1024, ldb= 98, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.257667 ms

xsmm-custom Time (libxsmm): 0.257667 ms

xsmm-custom No. of CPU cycles: 257666

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.25766666666666665

xsmm-custom avg execution time: 0.25766666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 98, 'a_nonzero': 672, 'a_rows': 49, 'a_size': 4802, 'a_unique': 24, 'alpha': 1.0, 'beta': 0.0, 'density': 0.13994169096209913, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0645536869340233, 'speedup_best_over_ref': 1.0645536869340233, 'xsmm_custom_avg': 0.25766666666666665, 'xsmm_custom_best': 0.25766666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.2743, 'xsmm_reference_best': 0.2743, 'xsmm_reference_cpu_freq': 0.999997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m460.txt...

Read matrix has 98 rows and 49 columns.

Input arrays: A (98, 49), B (49, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.302733 ms

xsmm-reference Time (libxsmm): 0.302733 ms

xsmm-reference No. of CPU cycles: 302733

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.30273333333333335

xsmm-reference avg execution time: 0.30273333333333335

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 383323486 cleaned_data/example_mats/quad/p6/gauss-legendre/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/quad/p6/gauss-legendre/m460.txt...

Read matrix has 98 rows and 49 columns.

Input arrays: A (98, 49), B (49, 1024).

Output array: C (98, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 98, k= 49

lda= 1024, ldb= 49, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.280967 ms

xsmm-custom Time (libxsmm): 0.280967 ms

xsmm-custom No. of CPU cycles: 280966

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.2809666666666667

xsmm-custom avg execution time: 0.2809666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 49, 'a_nonzero': 672, 'a_rows': 98, 'a_size': 4802, 'a_unique': 24, 'alpha': 1.0, 'beta': 0.0, 'density': 0.13994169096209913, 'mat_file': 'data/example_mats/quad/p6/gauss-legendre/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.07747063708625, 'speedup_best_over_ref': 1.07747063708625, 'xsmm_custom_avg': 0.2809666666666667, 'xsmm_custom_best': 0.2809666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.30273333333333335, 'xsmm_reference_best': 0.30273333333333335, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m0.txt...

Read matrix has 12 rows and 4 columns.

Input arrays: A (12, 4), B (4, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.003733 ms

xsmm-reference Time (libxsmm): 0.003733 ms

xsmm-reference No. of CPU cycles: 3733

CPU clock speed (GHz): 0.999911

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0037333333333333333

xsmm-reference avg execution time: 0.0037333333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 400369451 cleaned_data/example_mats/tet/p1/shunn-ham/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m0.txt...

Read matrix has 12 rows and 4 columns.

Input arrays: A (12, 4), B (4, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 4

lda= 1024, ldb= 4, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.004833 ms

xsmm-custom Time (libxsmm): 0.004833 ms

xsmm-custom No. of CPU cycles: 4833

CPU clock speed (GHz): 0.999931

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0048333333333333327

xsmm-custom avg execution time: 0.0048333333333333327

Freeing A

Freeing B

Freeing C

{'a_cols': 4, 'a_nonzero': 48, 'a_rows': 12, 'a_size': 48, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p1/shunn-ham/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.7724137931034484, 'speedup_best_over_ref': 0.7724137931034484, 'xsmm_custom_avg': 0.004833333333333333, 'xsmm_custom_best': 0.004833333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0037333333333333333, 'xsmm_reference_best': 0.0037333333333333333, 'xsmm_reference_cpu_freq': 0.999931, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m3.txt...

Read matrix has 4 rows and 12 columns.

Input arrays: A (4, 12), B (12, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002733 ms

xsmm-reference Time (libxsmm): 0.002733 ms

xsmm-reference No. of CPU cycles: 2733

CPU clock speed (GHz): 0.999878

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0027333333333333333

xsmm-reference avg execution time: 0.0027333333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 478719029 cleaned_data/example_mats/tet/p1/shunn-ham/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m3.txt...

Read matrix has 4 rows and 12 columns.

Input arrays: A (4, 12), B (12, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 4, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.003333 ms

xsmm-custom Time (libxsmm): 0.003333 ms

xsmm-custom No. of CPU cycles: 3333

CPU clock speed (GHz): 0.999900

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0033333333333333335

xsmm-custom avg execution time: 0.0033333333333333335

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 48, 'a_rows': 4, 'a_size': 48, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p1/shunn-ham/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.82, 'speedup_best_over_ref': 0.82, 'xsmm_custom_avg': 0.0033333333333333335, 'xsmm_custom_best': 0.0033333333333333335, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0027333333333333333, 'xsmm_reference_best': 0.0027333333333333333, 'xsmm_reference_cpu_freq': 0.9999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m6.txt...

Read matrix has 12 rows and 12 columns.

Input arrays: A (12, 12), B (12, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.008500 ms

xsmm-reference Time (libxsmm): 0.008500 ms

xsmm-reference No. of CPU cycles: 8500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0085000000000000006

xsmm-reference avg execution time: 0.0085000000000000006

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1905419290 cleaned_data/example_mats/tet/p1/shunn-ham/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m6.txt...

Read matrix has 12 rows and 12 columns.

Input arrays: A (12, 12), B (12, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.009533 ms

xsmm-custom Time (libxsmm): 0.009533 ms

xsmm-custom No. of CPU cycles: 9533

CPU clock speed (GHz): 0.999965

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0095333333333333329

xsmm-custom avg execution time: 0.0095333333333333329

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 72, 'a_rows': 12, 'a_size': 144, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p1/shunn-ham/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8916083916083917, 'speedup_best_over_ref': 0.8916083916083917, 'xsmm_custom_avg': 0.009533333333333333, 'xsmm_custom_best': 0.009533333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0085, 'xsmm_reference_best': 0.0085, 'xsmm_reference_cpu_freq': 0.999965, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m132.txt...

Read matrix has 4 rows and 12 columns.

Input arrays: A (4, 12), B (12, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002967 ms

xsmm-reference Time (libxsmm): 0.002967 ms

xsmm-reference No. of CPU cycles: 2966

CPU clock speed (GHz): 0.999775

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0029666666666666665

xsmm-reference avg execution time: 0.0029666666666666665

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1082254573 cleaned_data/example_mats/tet/p1/shunn-ham/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m132.txt...

Read matrix has 4 rows and 12 columns.

Input arrays: A (4, 12), B (12, 1024).

Output array: C (4, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 4, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.003833 ms

xsmm-custom Time (libxsmm): 0.003833 ms

xsmm-custom No. of CPU cycles: 3833

CPU clock speed (GHz): 0.999913

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0038333333333333336

xsmm-custom avg execution time: 0.0038333333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 24, 'a_rows': 4, 'a_size': 48, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p1/shunn-ham/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.7739130434782607, 'speedup_best_over_ref': 0.7739130434782607, 'xsmm_custom_avg': 0.0038333333333333336, 'xsmm_custom_best': 0.0038333333333333336, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0029666666666666665, 'xsmm_reference_best': 0.0029666666666666665, 'xsmm_reference_cpu_freq': 0.999913, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m460.txt...

Read matrix has 12 rows and 4 columns.

Input arrays: A (12, 4), B (4, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.003733 ms

xsmm-reference Time (libxsmm): 0.003733 ms

xsmm-reference No. of CPU cycles: 3733

CPU clock speed (GHz): 0.999911

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0037333333333333333

xsmm-reference avg execution time: 0.0037333333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1643936687 cleaned_data/example_mats/tet/p1/shunn-ham/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p1/shunn-ham/m460.txt...

Read matrix has 12 rows and 4 columns.

Input arrays: A (12, 4), B (4, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 4

lda= 1024, ldb= 4, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.004267 ms

xsmm-custom Time (libxsmm): 0.004267 ms

xsmm-custom No. of CPU cycles: 4266

CPU clock speed (GHz): 0.999844

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0042666666666666669

xsmm-custom avg execution time: 0.0042666666666666669

Freeing A

Freeing B

Freeing C

{'a_cols': 4, 'a_nonzero': 24, 'a_rows': 12, 'a_size': 48, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p1/shunn-ham/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.875, 'speedup_best_over_ref': 0.875, 'xsmm_custom_avg': 0.004266666666666667, 'xsmm_custom_best': 0.004266666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0037333333333333333, 'xsmm_reference_best': 0.0037333333333333333, 'xsmm_reference_cpu_freq': 0.999844, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m0.txt...

Read matrix has 24 rows and 10 columns.

Input arrays: A (24, 10), B (10, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.028000 ms

xsmm-reference Time (libxsmm): 0.028000 ms

xsmm-reference No. of CPU cycles: 28000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.028000000000000001

xsmm-reference avg execution time: 0.028000000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1135445540 cleaned_data/example_mats/tet/p2/shunn-ham/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m0.txt...

Read matrix has 24 rows and 10 columns.

Input arrays: A (24, 10), B (10, 1024).

Output array: C (24, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 24, k= 10

lda= 1024, ldb= 10, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 24

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.031233 ms

xsmm-custom Time (libxsmm): 0.031233 ms

xsmm-custom No. of CPU cycles: 31233

CPU clock speed (GHz): 0.999989

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.031233333333333335

xsmm-custom avg execution time: 0.031233333333333335

Freeing A

Freeing B

Freeing C

{'a_cols': 10, 'a_nonzero': 240, 'a_rows': 24, 'a_size': 240, 'a_unique': 14, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p2/shunn-ham/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8964781216648879, 'speedup_best_over_ref': 0.8964781216648879, 'xsmm_custom_avg': 0.031233333333333335, 'xsmm_custom_best': 0.031233333333333335, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.028, 'xsmm_reference_best': 0.028, 'xsmm_reference_cpu_freq': 0.999989, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m3.txt...

Read matrix has 10 rows and 24 columns.

Input arrays: A (10, 24), B (24, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.015333 ms

xsmm-reference Time (libxsmm): 0.015333 ms

xsmm-reference No. of CPU cycles: 15333

CPU clock speed (GHz): 0.999978

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.015333333333333334

xsmm-reference avg execution time: 0.015333333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 443921088 cleaned_data/example_mats/tet/p2/shunn-ham/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m3.txt...

Read matrix has 10 rows and 24 columns.

Input arrays: A (10, 24), B (24, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 10, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.017567 ms

xsmm-custom Time (libxsmm): 0.017567 ms

xsmm-custom No. of CPU cycles: 17566

CPU clock speed (GHz): 0.999962

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.017566666666666668

xsmm-custom avg execution time: 0.017566666666666668

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 240, 'a_rows': 10, 'a_size': 240, 'a_unique': 28, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p2/shunn-ham/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8728652751423149, 'speedup_best_over_ref': 0.8728652751423149, 'xsmm_custom_avg': 0.017566666666666668, 'xsmm_custom_best': 0.017566666666666668, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.015333333333333334, 'xsmm_reference_best': 0.015333333333333334, 'xsmm_reference_cpu_freq': 0.999962, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m6.txt...

Read matrix has 30 rows and 24 columns.

Input arrays: A (30, 24), B (24, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.059333 ms

xsmm-reference Time (libxsmm): 0.059333 ms

xsmm-reference No. of CPU cycles: 59333

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.059333333333333335

xsmm-reference avg execution time: 0.059333333333333335

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1536733193 cleaned_data/example_mats/tet/p2/shunn-ham/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m6.txt...

Read matrix has 30 rows and 24 columns.

Input arrays: A (30, 24), B (24, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 30, k= 24

lda= 1024, ldb= 24, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.064800 ms

xsmm-custom Time (libxsmm): 0.064800 ms

xsmm-custom No. of CPU cycles: 64800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.064799999999999996

xsmm-custom avg execution time: 0.064799999999999996

Freeing A

Freeing B

Freeing C

{'a_cols': 24, 'a_nonzero': 360, 'a_rows': 30, 'a_size': 720, 'a_unique': 14, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p2/shunn-ham/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9156378600823046, 'speedup_best_over_ref': 0.9156378600823046, 'xsmm_custom_avg': 0.0648, 'xsmm_custom_best': 0.0648, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.059333333333333335, 'xsmm_reference_best': 0.059333333333333335, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m132.txt...

Read matrix has 10 rows and 30 columns.

Input arrays: A (10, 30), B (30, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.017400 ms

xsmm-reference Time (libxsmm): 0.017400 ms

xsmm-reference No. of CPU cycles: 17400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.017400000000000002

xsmm-reference avg execution time: 0.017400000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1423262429 cleaned_data/example_mats/tet/p2/shunn-ham/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m132.txt...

Read matrix has 10 rows and 30 columns.

Input arrays: A (10, 30), B (30, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 10, k= 30

lda= 1024, ldb= 30, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.018967 ms

xsmm-custom Time (libxsmm): 0.018967 ms

xsmm-custom No. of CPU cycles: 18966

CPU clock speed (GHz): 0.999965

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.018966666666666666

xsmm-custom avg execution time: 0.018966666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 30, 'a_nonzero': 252, 'a_rows': 10, 'a_size': 300, 'a_unique': 23, 'alpha': 1.0, 'beta': 0.0, 'density': 0.84, 'mat_file': 'data/example_mats/tet/p2/shunn-ham/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9173989455184536, 'speedup_best_over_ref': 0.9173989455184536, 'xsmm_custom_avg': 0.018966666666666666, 'xsmm_custom_best': 0.018966666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.017400000000000002, 'xsmm_reference_best': 0.017400000000000002, 'xsmm_reference_cpu_freq': 0.999965, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m460.txt...

Read matrix has 30 rows and 10 columns.

Input arrays: A (30, 10), B (10, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.036233 ms

xsmm-reference Time (libxsmm): 0.036233 ms

xsmm-reference No. of CPU cycles: 36233

CPU clock speed (GHz): 0.999991

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.036233333333333333

xsmm-reference avg execution time: 0.036233333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1005329676 cleaned_data/example_mats/tet/p2/shunn-ham/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p2/shunn-ham/m460.txt...

Read matrix has 30 rows and 10 columns.

Input arrays: A (30, 10), B (10, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 30, k= 10

lda= 1024, ldb= 10, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.038433 ms

xsmm-custom Time (libxsmm): 0.038433 ms

xsmm-custom No. of CPU cycles: 38433

CPU clock speed (GHz): 0.999991

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.038433333333333333

xsmm-custom avg execution time: 0.038433333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 10, 'a_nonzero': 252, 'a_rows': 30, 'a_size': 300, 'a_unique': 23, 'alpha': 1.0, 'beta': 0.0, 'density': 0.84, 'mat_file': 'data/example_mats/tet/p2/shunn-ham/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9427580225498698, 'speedup_best_over_ref': 0.9427580225498698, 'xsmm_custom_avg': 0.03843333333333333, 'xsmm_custom_best': 0.03843333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.03623333333333333, 'xsmm_reference_best': 0.03623333333333333, 'xsmm_reference_cpu_freq': 0.999991, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m0.txt...

Read matrix has 40 rows and 20 columns.

Input arrays: A (40, 20), B (20, 1024).

Output array: C (40, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.072700 ms

xsmm-reference Time (libxsmm): 0.072700 ms

xsmm-reference No. of CPU cycles: 72700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.072700000000000001

xsmm-reference avg execution time: 0.072700000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1960480774 cleaned_data/example_mats/tet/p3/shunn-ham/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m0.txt...

Read matrix has 40 rows and 20 columns.

Input arrays: A (40, 20), B (20, 1024).

Output array: C (40, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 40, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 40

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.075200 ms

xsmm-custom Time (libxsmm): 0.075200 ms

xsmm-custom No. of CPU cycles: 75200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.075199999999999989

xsmm-custom avg execution time: 0.075199999999999989

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 800, 'a_rows': 40, 'a_size': 800, 'a_unique': 40, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p3/shunn-ham/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9667553191489363, 'speedup_best_over_ref': 0.9667553191489363, 'xsmm_custom_avg': 0.07519999999999999, 'xsmm_custom_best': 0.07519999999999999, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0727, 'xsmm_reference_best': 0.0727, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m3.txt...

Read matrix has 20 rows and 40 columns.

Input arrays: A (20, 40), B (40, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.051433 ms

xsmm-reference Time (libxsmm): 0.051433 ms

xsmm-reference No. of CPU cycles: 51433

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.051433333333333331

xsmm-reference avg execution time: 0.051433333333333331

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 919250802 cleaned_data/example_mats/tet/p3/shunn-ham/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m3.txt...

Read matrix has 20 rows and 40 columns.

Input arrays: A (20, 40), B (40, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 20, k= 40

lda= 1024, ldb= 40, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.057367 ms

xsmm-custom Time (libxsmm): 0.057367 ms

xsmm-custom No. of CPU cycles: 57366

CPU clock speed (GHz): 0.999988

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.05736666666666667

xsmm-custom avg execution time: 0.05736666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 40, 'a_nonzero': 800, 'a_rows': 20, 'a_size': 800, 'a_unique': 80, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p3/shunn-ham/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8965717606042998, 'speedup_best_over_ref': 0.8965717606042998, 'xsmm_custom_avg': 0.05736666666666667, 'xsmm_custom_best': 0.05736666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.05143333333333333, 'xsmm_reference_best': 0.05143333333333333, 'xsmm_reference_cpu_freq': 0.999988, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m6.txt...

Read matrix has 60 rows and 40 columns.

Input arrays: A (60, 40), B (40, 1024).

Output array: C (60, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.177400 ms

xsmm-reference Time (libxsmm): 0.177400 ms

xsmm-reference No. of CPU cycles: 177400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.1774

xsmm-reference avg execution time: 0.1774

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1527576926 cleaned_data/example_mats/tet/p3/shunn-ham/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m6.txt...

Read matrix has 60 rows and 40 columns.

Input arrays: A (60, 40), B (40, 1024).

Output array: C (60, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 60, k= 40

lda= 1024, ldb= 40, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.192233 ms

xsmm-custom Time (libxsmm): 0.192233 ms

xsmm-custom No. of CPU cycles: 192233

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.19223333333333334

xsmm-custom avg execution time: 0.19223333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 40, 'a_nonzero': 1200, 'a_rows': 60, 'a_size': 2400, 'a_unique': 40, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p3/shunn-ham/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9228368302410265, 'speedup_best_over_ref': 0.9228368302410265, 'xsmm_custom_avg': 0.19223333333333334, 'xsmm_custom_best': 0.19223333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1774, 'xsmm_reference_best': 0.1774, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m132.txt...

Read matrix has 20 rows and 60 columns.

Input arrays: A (20, 60), B (60, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.082200 ms

xsmm-reference Time (libxsmm): 0.082200 ms

xsmm-reference No. of CPU cycles: 82200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.082200000000000009

xsmm-reference avg execution time: 0.082200000000000009

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 953803902 cleaned_data/example_mats/tet/p3/shunn-ham/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m132.txt...

Read matrix has 20 rows and 60 columns.

Input arrays: A (20, 60), B (60, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 20, k= 60

lda= 1024, ldb= 60, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.082633 ms

xsmm-custom Time (libxsmm): 0.082633 ms

xsmm-custom No. of CPU cycles: 82633

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.082633333333333336

xsmm-custom avg execution time: 0.082633333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 60, 'a_nonzero': 1092, 'a_rows': 20, 'a_size': 1200, 'a_unique': 100, 'alpha': 1.0, 'beta': 0.0, 'density': 0.91, 'mat_file': 'data/example_mats/tet/p3/shunn-ham/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9947559499798306, 'speedup_best_over_ref': 0.9947559499798306, 'xsmm_custom_avg': 0.08263333333333334, 'xsmm_custom_best': 0.08263333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.08220000000000001, 'xsmm_reference_best': 0.08220000000000001, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m460.txt...

Read matrix has 60 rows and 20 columns.

Input arrays: A (60, 20), B (20, 1024).

Output array: C (60, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.114567 ms

xsmm-reference Time (libxsmm): 0.114567 ms

xsmm-reference No. of CPU cycles: 114566

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.11456666666666666

xsmm-reference avg execution time: 0.11456666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 53258721 cleaned_data/example_mats/tet/p3/shunn-ham/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p3/shunn-ham/m460.txt...

Read matrix has 60 rows and 20 columns.

Input arrays: A (60, 20), B (20, 1024).

Output array: C (60, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 60, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.124233 ms

xsmm-custom Time (libxsmm): 0.124233 ms

xsmm-custom No. of CPU cycles: 124233

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.12423333333333333

xsmm-custom avg execution time: 0.12423333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 1092, 'a_rows': 60, 'a_size': 1200, 'a_unique': 100, 'alpha': 1.0, 'beta': 0.0, 'density': 0.91, 'mat_file': 'data/example_mats/tet/p3/shunn-ham/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9221894284947679, 'speedup_best_over_ref': 0.9221894284947679, 'xsmm_custom_avg': 0.12423333333333333, 'xsmm_custom_best': 0.12423333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.11456666666666666, 'xsmm_reference_best': 0.11456666666666666, 'xsmm_reference_cpu_freq': 0.999997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m0.txt...

Read matrix has 60 rows and 35 columns.

Input arrays: A (60, 35), B (35, 1024).

Output array: C (60, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.139300 ms

xsmm-reference Time (libxsmm): 0.139300 ms

xsmm-reference No. of CPU cycles: 139300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.13930000000000001

xsmm-reference avg execution time: 0.13930000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1553671371 cleaned_data/example_mats/tet/p4/shunn-ham/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m0.txt...

Read matrix has 60 rows and 35 columns.

Input arrays: A (60, 35), B (35, 1024).

Output array: C (60, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 60, k= 35

lda= 1024, ldb= 35, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.138900 ms

xsmm-custom Time (libxsmm): 0.138900 ms

xsmm-custom No. of CPU cycles: 138900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.1389

xsmm-custom avg execution time: 0.1389

Freeing A

Freeing B

Freeing C

{'a_cols': 35, 'a_nonzero': 2100, 'a_rows': 60, 'a_size': 2100, 'a_unique': 101, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p4/shunn-ham/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0028797696184306, 'speedup_best_over_ref': 1.0028797696184306, 'xsmm_custom_avg': 0.1389, 'xsmm_custom_best': 0.1389, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1393, 'xsmm_reference_best': 0.1393, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m3.txt...

Read matrix has 35 rows and 60 columns.

Input arrays: A (35, 60), B (60, 1024).

Output array: C (35, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.128233 ms

xsmm-reference Time (libxsmm): 0.128200 ms

xsmm-reference No. of CPU cycles: 128200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.12823333333333334

xsmm-reference avg execution time: 0.12823333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1055069202 cleaned_data/example_mats/tet/p4/shunn-ham/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m3.txt...

Read matrix has 35 rows and 60 columns.

Input arrays: A (35, 60), B (60, 1024).

Output array: C (35, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 35, k= 60

lda= 1024, ldb= 60, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.139733 ms

xsmm-custom Time (libxsmm): 0.139733 ms

xsmm-custom No. of CPU cycles: 139733

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.13973333333333335

xsmm-custom avg execution time: 0.13973333333333335

Freeing A

Freeing B

Freeing C

{'a_cols': 60, 'a_nonzero': 2100, 'a_rows': 35, 'a_size': 2100, 'a_unique': 202, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p4/shunn-ham/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9177003816793893, 'speedup_best_over_ref': 0.9177003816793893, 'xsmm_custom_avg': 0.13973333333333335, 'xsmm_custom_best': 0.13973333333333335, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.12823333333333334, 'xsmm_reference_best': 0.12823333333333334, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m6.txt...

Read matrix has 105 rows and 60 columns.

Input arrays: A (105, 60), B (60, 1024).

Output array: C (105, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.422100 ms

xsmm-reference Time (libxsmm): 0.422100 ms

xsmm-reference No. of CPU cycles: 422100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.42210000000000003

xsmm-reference avg execution time: 0.42210000000000003

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1234918502 cleaned_data/example_mats/tet/p4/shunn-ham/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m6.txt...

Read matrix has 105 rows and 60 columns.

Input arrays: A (105, 60), B (60, 1024).

Output array: C (105, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 105, k= 60

lda= 1024, ldb= 60, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.392700 ms

xsmm-custom Time (libxsmm): 0.392667 ms

xsmm-custom No. of CPU cycles: 392666

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.39269999999999999

xsmm-custom avg execution time: 0.39269999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 60, 'a_nonzero': 3150, 'a_rows': 105, 'a_size': 6300, 'a_unique': 101, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p4/shunn-ham/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0748663101604279, 'speedup_best_over_ref': 1.0748663101604279, 'xsmm_custom_avg': 0.3927, 'xsmm_custom_best': 0.3927, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.42210000000000003, 'xsmm_reference_best': 0.42210000000000003, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m132.txt...

Read matrix has 35 rows and 105 columns.

Input arrays: A (35, 105), B (105, 1024).

Output array: C (35, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.179433 ms

xsmm-reference Time (libxsmm): 0.179433 ms

xsmm-reference No. of CPU cycles: 179433

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.17943333333333333

xsmm-reference avg execution time: 0.17943333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 493646052 cleaned_data/example_mats/tet/p4/shunn-ham/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m132.txt...

Read matrix has 35 rows and 105 columns.

Input arrays: A (35, 105), B (105, 1024).

Output array: C (35, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 35, k= 105

lda= 1024, ldb= 105, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.187867 ms

xsmm-custom Time (libxsmm): 0.187867 ms

xsmm-custom No. of CPU cycles: 187866

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.18786666666666668

xsmm-custom avg execution time: 0.18786666666666668

Freeing A

Freeing B

Freeing C

{'a_cols': 105, 'a_nonzero': 3432, 'a_rows': 35, 'a_size': 3675, 'a_unique': 304, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9338775510204081, 'mat_file': 'data/example_mats/tet/p4/shunn-ham/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.955110007097232, 'speedup_best_over_ref': 0.955110007097232, 'xsmm_custom_avg': 0.18786666666666668, 'xsmm_custom_best': 0.18786666666666668, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.17943333333333333, 'xsmm_reference_best': 0.17943333333333333, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m460.txt...

Read matrix has 105 rows and 35 columns.

Input arrays: A (105, 35), B (35, 1024).

Output array: C (105, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.260100 ms

xsmm-reference Time (libxsmm): 0.260100 ms

xsmm-reference No. of CPU cycles: 260100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.2601

xsmm-reference avg execution time: 0.2601

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1652467415 cleaned_data/example_mats/tet/p4/shunn-ham/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p4/shunn-ham/m460.txt...

Read matrix has 105 rows and 35 columns.

Input arrays: A (105, 35), B (35, 1024).

Output array: C (105, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 105, k= 35

lda= 1024, ldb= 35, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.264167 ms

xsmm-custom Time (libxsmm): 0.264167 ms

xsmm-custom No. of CPU cycles: 264166

CPU clock speed (GHz): 0.999997

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.26416666666666666

xsmm-custom avg execution time: 0.26416666666666666

Freeing A

Freeing B

Freeing C

{'a_cols': 35, 'a_nonzero': 3432, 'a_rows': 105, 'a_size': 3675, 'a_unique': 304, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9338775510204081, 'mat_file': 'data/example_mats/tet/p4/shunn-ham/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9846056782334385, 'speedup_best_over_ref': 0.9846056782334385, 'xsmm_custom_avg': 0.26416666666666666, 'xsmm_custom_best': 0.26416666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.2601, 'xsmm_reference_best': 0.2601, 'xsmm_reference_cpu_freq': 0.999997, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m0.txt...

Read matrix has 84 rows and 56 columns.

Input arrays: A (84, 56), B (56, 1024).

Output array: C (84, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.284900 ms

xsmm-reference Time (libxsmm): 0.284867 ms

xsmm-reference No. of CPU cycles: 284866

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.28490000000000004

xsmm-reference avg execution time: 0.28490000000000004

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1856426433 cleaned_data/example_mats/tet/p5/shunn-ham/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m0.txt...

Read matrix has 84 rows and 56 columns.

Input arrays: A (84, 56), B (56, 1024).

Output array: C (84, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 84, k= 56

lda= 1024, ldb= 56, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.282867 ms

xsmm-custom Time (libxsmm): 0.282867 ms

xsmm-custom No. of CPU cycles: 282866

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.28286666666666671

xsmm-custom avg execution time: 0.28286666666666671

Freeing A

Freeing B

Freeing C

{'a_cols': 56, 'a_nonzero': 4704, 'a_rows': 84, 'a_size': 4704, 'a_unique': 214, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p5/shunn-ham/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.007188310157907, 'speedup_best_over_ref': 1.007188310157907, 'xsmm_custom_avg': 0.2828666666666667, 'xsmm_custom_best': 0.2828666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.28490000000000004, 'xsmm_reference_best': 0.28490000000000004, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m3.txt...

Read matrix has 56 rows and 84 columns.

Input arrays: A (56, 84), B (84, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.275333 ms

xsmm-reference Time (libxsmm): 0.275333 ms

xsmm-reference No. of CPU cycles: 275333

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.27533333333333332

xsmm-reference avg execution time: 0.27533333333333332

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1720252951 cleaned_data/example_mats/tet/p5/shunn-ham/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m3.txt...

Read matrix has 56 rows and 84 columns.

Input arrays: A (56, 84), B (84, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 56, k= 84

lda= 1024, ldb= 84, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 56

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.275167 ms

xsmm-custom Time (libxsmm): 0.275133 ms

xsmm-custom No. of CPU cycles: 275133

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.27516666666666667

xsmm-custom avg execution time: 0.27516666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 84, 'a_nonzero': 4704, 'a_rows': 56, 'a_size': 4704, 'a_unique': 428, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p5/shunn-ham/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0006056935190792, 'speedup_best_over_ref': 1.0006056935190792, 'xsmm_custom_avg': 0.27516666666666667, 'xsmm_custom_best': 0.27516666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.2753333333333333, 'xsmm_reference_best': 0.2753333333333333, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m6.txt...

Read matrix has 168 rows and 84 columns.

Input arrays: A (168, 84), B (84, 1024).

Output array: C (168, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.776067 ms

xsmm-reference Time (libxsmm): 0.776067 ms

xsmm-reference No. of CPU cycles: 776066

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.77606666666666668

xsmm-reference avg execution time: 0.77606666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1693265232 cleaned_data/example_mats/tet/p5/shunn-ham/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m6.txt...

Read matrix has 168 rows and 84 columns.

Input arrays: A (168, 84), B (84, 1024).

Output array: C (168, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 168, k= 84

lda= 1024, ldb= 84, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 168

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.680700 ms

xsmm-custom Time (libxsmm): 0.680700 ms

xsmm-custom No. of CPU cycles: 680700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.68069999999999997

xsmm-custom avg execution time: 0.68069999999999997

Freeing A

Freeing B

Freeing C

{'a_cols': 84, 'a_nonzero': 7056, 'a_rows': 168, 'a_size': 14112, 'a_unique': 214, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p5/shunn-ham/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1401008765486509, 'speedup_best_over_ref': 1.1401008765486509, 'xsmm_custom_avg': 0.6807, 'xsmm_custom_best': 0.6807, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.7760666666666667, 'xsmm_reference_best': 0.7760666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m132.txt...

Read matrix has 56 rows and 168 columns.

Input arrays: A (56, 168), B (168, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.503933 ms

xsmm-reference Time (libxsmm): 0.503933 ms

xsmm-reference No. of CPU cycles: 503933

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.50393333333333334

xsmm-reference avg execution time: 0.50393333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 544686188 cleaned_data/example_mats/tet/p5/shunn-ham/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m132.txt...

Read matrix has 56 rows and 168 columns.

Input arrays: A (56, 168), B (168, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 56, k= 168

lda= 1024, ldb= 168, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 56

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.431667 ms

xsmm-custom Time (libxsmm): 0.431667 ms

xsmm-custom No. of CPU cycles: 431666

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.43166666666666664

xsmm-custom avg execution time: 0.43166666666666664

Freeing A

Freeing B

Freeing C

{'a_cols': 168, 'a_nonzero': 8976, 'a_rows': 56, 'a_size': 9408, 'a_unique': 784, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9540816326530612, 'mat_file': 'data/example_mats/tet/p5/shunn-ham/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1674131274131274, 'speedup_best_over_ref': 1.1674131274131274, 'xsmm_custom_avg': 0.43166666666666664, 'xsmm_custom_best': 0.43166666666666664, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.5039333333333333, 'xsmm_reference_best': 0.5039333333333333, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m460.txt...

Read matrix has 168 rows and 56 columns.

Input arrays: A (168, 56), B (56, 1024).

Output array: C (168, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.601067 ms

xsmm-reference Time (libxsmm): 0.601067 ms

xsmm-reference No. of CPU cycles: 601066

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.60106666666666664

xsmm-reference avg execution time: 0.60106666666666664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 430094455 cleaned_data/example_mats/tet/p5/shunn-ham/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p5/shunn-ham/m460.txt...

Read matrix has 168 rows and 56 columns.

Input arrays: A (168, 56), B (56, 1024).

Output array: C (168, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 168, k= 56

lda= 1024, ldb= 56, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 168

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.508700 ms

xsmm-custom Time (libxsmm): 0.508700 ms

xsmm-custom No. of CPU cycles: 508700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.50869999999999993

xsmm-custom avg execution time: 0.50869999999999993

Freeing A

Freeing B

Freeing C

{'a_cols': 56, 'a_nonzero': 8976, 'a_rows': 168, 'a_size': 9408, 'a_unique': 784, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9540816326530612, 'mat_file': 'data/example_mats/tet/p5/shunn-ham/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.1815739466614246, 'speedup_best_over_ref': 1.1815739466614246, 'xsmm_custom_avg': 0.5086999999999999, 'xsmm_custom_best': 0.5086999999999999, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.6010666666666666, 'xsmm_reference_best': 0.6010666666666666, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m0.txt...

Read matrix has 112 rows and 84 columns.

Input arrays: A (112, 84), B (84, 1024).

Output array: C (112, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.480967 ms

xsmm-reference Time (libxsmm): 0.480967 ms

xsmm-reference No. of CPU cycles: 480966

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.48096666666666665

xsmm-reference avg execution time: 0.48096666666666665

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1149962730 cleaned_data/example_mats/tet/p6/shunn-ham/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m0.txt...

Read matrix has 112 rows and 84 columns.

Input arrays: A (112, 84), B (84, 1024).

Output array: C (112, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 112, k= 84

lda= 1024, ldb= 84, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 112

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.457667 ms

xsmm-custom Time (libxsmm): 0.457667 ms

xsmm-custom No. of CPU cycles: 457666

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.45766666666666667

xsmm-custom avg execution time: 0.45766666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 84, 'a_nonzero': 9408, 'a_rows': 112, 'a_size': 9408, 'a_unique': 425, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p6/shunn-ham/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.050910415149308, 'speedup_best_over_ref': 1.050910415149308, 'xsmm_custom_avg': 0.45766666666666667, 'xsmm_custom_best': 0.45766666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.48096666666666665, 'xsmm_reference_best': 0.48096666666666665, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m3.txt...

Read matrix has 84 rows and 112 columns.

Input arrays: A (84, 112), B (112, 1024).

Output array: C (84, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.480833 ms

xsmm-reference Time (libxsmm): 0.480833 ms

xsmm-reference No. of CPU cycles: 480833

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.48083333333333333

xsmm-reference avg execution time: 0.48083333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1232117940 cleaned_data/example_mats/tet/p6/shunn-ham/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m3.txt...

Read matrix has 84 rows and 112 columns.

Input arrays: A (84, 112), B (112, 1024).

Output array: C (84, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 84, k= 112

lda= 1024, ldb= 112, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.441400 ms

xsmm-custom Time (libxsmm): 0.441400 ms

xsmm-custom No. of CPU cycles: 441400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.44140000000000001

xsmm-custom avg execution time: 0.44140000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 112, 'a_nonzero': 9408, 'a_rows': 84, 'a_size': 9408, 'a_unique': 850, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tet/p6/shunn-ham/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0893369581634194, 'speedup_best_over_ref': 1.0893369581634194, 'xsmm_custom_avg': 0.4414, 'xsmm_custom_best': 0.4414, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.48083333333333333, 'xsmm_reference_best': 0.48083333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m6.txt...

Read matrix has 252 rows and 112 columns.

Input arrays: A (252, 112), B (112, 1024).

Output array: C (252, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.409533 ms

xsmm-reference Time (libxsmm): 1.409533 ms

xsmm-reference No. of CPU cycles: 1409533

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.4095333333333333

xsmm-reference avg execution time: 1.4095333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 903095318 cleaned_data/example_mats/tet/p6/shunn-ham/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m6.txt...

Read matrix has 252 rows and 112 columns.

Input arrays: A (252, 112), B (112, 1024).

Output array: C (252, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 252, k= 112

lda= 1024, ldb= 112, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 1.401067 ms

xsmm-custom Time (libxsmm): 1.401033 ms

xsmm-custom No. of CPU cycles: 1401033

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 1.4010666666666665

xsmm-custom avg execution time: 1.4010666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 112, 'a_nonzero': 14112, 'a_rows': 252, 'a_size': 28224, 'a_unique': 425, 'alpha': 1.0, 'beta': 0.0, 'density': 0.5, 'mat_file': 'data/example_mats/tet/p6/shunn-ham/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.006043014845832, 'speedup_best_over_ref': 1.006043014845832, 'xsmm_custom_avg': 1.4010666666666665, 'xsmm_custom_best': 1.4010666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.4095333333333333, 'xsmm_reference_best': 1.4095333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m132.txt...

Read matrix has 84 rows and 252 columns.

Input arrays: A (84, 252), B (252, 1024).

Output array: C (84, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.993300 ms

xsmm-reference Time (libxsmm): 0.993300 ms

xsmm-reference No. of CPU cycles: 993300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.99329999999999996

xsmm-reference avg execution time: 0.99329999999999996

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1582220186 cleaned_data/example_mats/tet/p6/shunn-ham/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m132.txt...

Read matrix has 84 rows and 252 columns.

Input arrays: A (84, 252), B (252, 1024).

Output array: C (84, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 84, k= 252

lda= 1024, ldb= 252, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.964267 ms

xsmm-custom Time (libxsmm): 0.964267 ms

xsmm-custom No. of CPU cycles: 964266

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.96426666666666672

xsmm-custom avg execution time: 0.96426666666666672

Freeing A

Freeing B

Freeing C

{'a_cols': 252, 'a_nonzero': 20400, 'a_rows': 84, 'a_size': 21168, 'a_unique': 1760, 'alpha': 1.0, 'beta': 0.0, 'density': 0.963718820861678, 'mat_file': 'data/example_mats/tet/p6/shunn-ham/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0301092367256637, 'speedup_best_over_ref': 1.0301092367256637, 'xsmm_custom_avg': 0.9642666666666667, 'xsmm_custom_best': 0.9642666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.9933, 'xsmm_reference_best': 0.9933, 'xsmm_reference_cpu_freq': 0.999999, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m460.txt...

Read matrix has 252 rows and 84 columns.

Input arrays: A (252, 84), B (84, 1024).

Output array: C (252, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 1.094700 ms

xsmm-reference Time (libxsmm): 1.094667 ms

xsmm-reference No. of CPU cycles: 1094666

CPU clock speed (GHz): 0.999999

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 1.0947

xsmm-reference avg execution time: 1.0947

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 254632271 cleaned_data/example_mats/tet/p6/shunn-ham/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tet/p6/shunn-ham/m460.txt...

Read matrix has 252 rows and 84 columns.

Input arrays: A (252, 84), B (84, 1024).

Output array: C (252, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 252, k= 84

lda= 1024, ldb= 84, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 1.061200 ms

xsmm-custom Time (libxsmm): 1.061233 ms

xsmm-custom No. of CPU cycles: 1061233

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 1.0611999999999999

xsmm-custom avg execution time: 1.0611999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 84, 'a_nonzero': 20400, 'a_rows': 252, 'a_size': 21168, 'a_unique': 1760, 'alpha': 1.0, 'beta': 0.0, 'density': 0.963718820861678, 'mat_file': 'data/example_mats/tet/p6/shunn-ham/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0315680361854505, 'speedup_best_over_ref': 1.0315680361854505, 'xsmm_custom_avg': 1.0612, 'xsmm_custom_best': 1.0612, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 1.0947, 'xsmm_reference_best': 1.0947, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m0.txt...

Read matrix has 6 rows and 3 columns.

Input arrays: A (6, 3), B (3, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002000 ms

xsmm-reference Time (libxsmm): 0.002000 ms

xsmm-reference No. of CPU cycles: 2000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.002

xsmm-reference avg execution time: 0.002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1593563175 cleaned_data/example_mats/tri/p1/williams-shunn/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m0.txt...

Read matrix has 6 rows and 3 columns.

Input arrays: A (6, 3), B (3, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 6, k= 3

lda= 1024, ldb= 3, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.002467 ms

xsmm-custom Time (libxsmm): 0.002467 ms

xsmm-custom No. of CPU cycles: 2466

CPU clock speed (GHz): 0.999730

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0024666666666666665

xsmm-custom avg execution time: 0.0024666666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 3, 'a_nonzero': 18, 'a_rows': 6, 'a_size': 18, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p1/williams-shunn/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8108108108108109, 'speedup_best_over_ref': 0.8108108108108109, 'xsmm_custom_avg': 0.0024666666666666665, 'xsmm_custom_best': 0.0024666666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.002, 'xsmm_reference_best': 0.002, 'xsmm_reference_cpu_freq': 0.99973, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m3.txt...

Read matrix has 3 rows and 6 columns.

Input arrays: A (3, 6), B (6, 1024).

Output array: C (3, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.001500 ms

xsmm-reference Time (libxsmm): 0.001500 ms

xsmm-reference No. of CPU cycles: 1500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0015

xsmm-reference avg execution time: 0.0015

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1714065085 cleaned_data/example_mats/tri/p1/williams-shunn/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m3.txt...

Read matrix has 3 rows and 6 columns.

Input arrays: A (3, 6), B (6, 1024).

Output array: C (3, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 3, k= 6

lda= 1024, ldb= 6, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.001933 ms

xsmm-custom Time (libxsmm): 0.001933 ms

xsmm-custom No. of CPU cycles: 1933

CPU clock speed (GHz): 0.999828

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0019333333333333333

xsmm-custom avg execution time: 0.0019333333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 6, 'a_nonzero': 18, 'a_rows': 3, 'a_size': 18, 'a_unique': 6, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p1/williams-shunn/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.7758620689655172, 'speedup_best_over_ref': 0.7758620689655172, 'xsmm_custom_avg': 0.0019333333333333333, 'xsmm_custom_best': 0.0019333333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0015, 'xsmm_reference_best': 0.0015, 'xsmm_reference_cpu_freq': 0.999828, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m6.txt...

Read matrix has 6 rows and 6 columns.

Input arrays: A (6, 6), B (6, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.002767 ms

xsmm-reference Time (libxsmm): 0.002800 ms

xsmm-reference No. of CPU cycles: 2800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0027666666666666668

xsmm-reference avg execution time: 0.0027666666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1093614139 cleaned_data/example_mats/tri/p1/williams-shunn/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m6.txt...

Read matrix has 6 rows and 6 columns.

Input arrays: A (6, 6), B (6, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 6, k= 6

lda= 1024, ldb= 6, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.003067 ms

xsmm-custom Time (libxsmm): 0.003067 ms

xsmm-custom No. of CPU cycles: 3066

CPU clock speed (GHz): 0.999783

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0030666666666666668

xsmm-custom avg execution time: 0.0030666666666666668

Freeing A

Freeing B

Freeing C

{'a_cols': 6, 'a_nonzero': 24, 'a_rows': 6, 'a_size': 36, 'a_unique': 3, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p1/williams-shunn/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9021739130434783, 'speedup_best_over_ref': 0.9021739130434783, 'xsmm_custom_avg': 0.0030666666666666668, 'xsmm_custom_best': 0.0030666666666666668, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.002766666666666667, 'xsmm_reference_best': 0.002766666666666667, 'xsmm_reference_cpu_freq': 0.999783, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m132.txt...

Read matrix has 3 rows and 6 columns.

Input arrays: A (3, 6), B (6, 1024).

Output array: C (3, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.001600 ms

xsmm-reference Time (libxsmm): 0.001600 ms

xsmm-reference No. of CPU cycles: 1600

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0016000000000000001

xsmm-reference avg execution time: 0.0016000000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1562160994 cleaned_data/example_mats/tri/p1/williams-shunn/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m132.txt...

Read matrix has 3 rows and 6 columns.

Input arrays: A (3, 6), B (6, 1024).

Output array: C (3, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 3, k= 6

lda= 1024, ldb= 6, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.001967 ms

xsmm-custom Time (libxsmm): 0.001967 ms

xsmm-custom No. of CPU cycles: 1966

CPU clock speed (GHz): 0.999661

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0019666666666666665

xsmm-custom avg execution time: 0.0019666666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 6, 'a_nonzero': 12, 'a_rows': 3, 'a_size': 18, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p1/williams-shunn/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8135593220338985, 'speedup_best_over_ref': 0.8135593220338985, 'xsmm_custom_avg': 0.0019666666666666665, 'xsmm_custom_best': 0.0019666666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0016, 'xsmm_reference_best': 0.0016, 'xsmm_reference_cpu_freq': 0.999661, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m460.txt...

Read matrix has 6 rows and 3 columns.

Input arrays: A (6, 3), B (3, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.001800 ms

xsmm-reference Time (libxsmm): 0.001800 ms

xsmm-reference No. of CPU cycles: 1800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0018

xsmm-reference avg execution time: 0.0018

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 327442826 cleaned_data/example_mats/tri/p1/williams-shunn/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p1/williams-shunn/m460.txt...

Read matrix has 6 rows and 3 columns.

Input arrays: A (6, 3), B (3, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 6, k= 3

lda= 1024, ldb= 3, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.002200 ms

xsmm-custom Time (libxsmm): 0.002200 ms

xsmm-custom No. of CPU cycles: 2200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0022000000000000001

xsmm-custom avg execution time: 0.0022000000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 3, 'a_nonzero': 12, 'a_rows': 6, 'a_size': 18, 'a_unique': 1, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p1/williams-shunn/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8181818181818181, 'speedup_best_over_ref': 0.8181818181818181, 'xsmm_custom_avg': 0.0022, 'xsmm_custom_best': 0.0022, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0018, 'xsmm_reference_best': 0.0018, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m0.txt...

Read matrix has 9 rows and 6 columns.

Input arrays: A (9, 6), B (6, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.003733 ms

xsmm-reference Time (libxsmm): 0.003733 ms

xsmm-reference No. of CPU cycles: 3733

CPU clock speed (GHz): 0.999911

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0037333333333333333

xsmm-reference avg execution time: 0.0037333333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 928639904 cleaned_data/example_mats/tri/p2/williams-shunn/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m0.txt...

Read matrix has 9 rows and 6 columns.

Input arrays: A (9, 6), B (6, 1024).

Output array: C (9, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 9, k= 6

lda= 1024, ldb= 6, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.004267 ms

xsmm-custom Time (libxsmm): 0.004233 ms

xsmm-custom No. of CPU cycles: 4233

CPU clock speed (GHz): 0.999921

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0042666666666666669

xsmm-custom avg execution time: 0.0042666666666666669

Freeing A

Freeing B

Freeing C

{'a_cols': 6, 'a_nonzero': 54, 'a_rows': 9, 'a_size': 54, 'a_unique': 10, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p2/williams-shunn/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.875, 'speedup_best_over_ref': 0.875, 'xsmm_custom_avg': 0.004266666666666667, 'xsmm_custom_best': 0.004266666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0037333333333333333, 'xsmm_reference_best': 0.0037333333333333333, 'xsmm_reference_cpu_freq': 0.999921, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m3.txt...

Read matrix has 6 rows and 9 columns.

Input arrays: A (6, 9), B (9, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.003700 ms

xsmm-reference Time (libxsmm): 0.003700 ms

xsmm-reference No. of CPU cycles: 3700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0037000000000000002

xsmm-reference avg execution time: 0.0037000000000000002

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1552714391 cleaned_data/example_mats/tri/p2/williams-shunn/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m3.txt...

Read matrix has 6 rows and 9 columns.

Input arrays: A (6, 9), B (9, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 6, k= 9

lda= 1024, ldb= 9, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.004300 ms

xsmm-custom Time (libxsmm): 0.004300 ms

xsmm-custom No. of CPU cycles: 4300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0043

xsmm-custom avg execution time: 0.0043

Freeing A

Freeing B

Freeing C

{'a_cols': 9, 'a_nonzero': 54, 'a_rows': 6, 'a_size': 54, 'a_unique': 20, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p2/williams-shunn/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8604651162790699, 'speedup_best_over_ref': 0.8604651162790699, 'xsmm_custom_avg': 0.0043, 'xsmm_custom_best': 0.0043, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0037, 'xsmm_reference_best': 0.0037, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m6.txt...

Read matrix has 12 rows and 9 columns.

Input arrays: A (12, 9), B (9, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.007167 ms

xsmm-reference Time (libxsmm): 0.007167 ms

xsmm-reference No. of CPU cycles: 7166

CPU clock speed (GHz): 0.999907

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0071666666666666667

xsmm-reference avg execution time: 0.0071666666666666667

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1518551625 cleaned_data/example_mats/tri/p2/williams-shunn/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m6.txt...

Read matrix has 12 rows and 9 columns.

Input arrays: A (12, 9), B (9, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 9

lda= 1024, ldb= 9, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.008267 ms

xsmm-custom Time (libxsmm): 0.008267 ms

xsmm-custom No. of CPU cycles: 8266

CPU clock speed (GHz): 0.999919

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.008266666666666667

xsmm-custom avg execution time: 0.008266666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 9, 'a_nonzero': 72, 'a_rows': 12, 'a_size': 108, 'a_unique': 10, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p2/williams-shunn/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8669354838709677, 'speedup_best_over_ref': 0.8669354838709677, 'xsmm_custom_avg': 0.008266666666666667, 'xsmm_custom_best': 0.008266666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.007166666666666667, 'xsmm_reference_best': 0.007166666666666667, 'xsmm_reference_cpu_freq': 0.999919, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m132.txt...

Read matrix has 6 rows and 12 columns.

Input arrays: A (6, 12), B (12, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.004567 ms

xsmm-reference Time (libxsmm): 0.004567 ms

xsmm-reference No. of CPU cycles: 4566

CPU clock speed (GHz): 0.999854

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0045666666666666668

xsmm-reference avg execution time: 0.0045666666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 393142139 cleaned_data/example_mats/tri/p2/williams-shunn/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m132.txt...

Read matrix has 6 rows and 12 columns.

Input arrays: A (6, 12), B (12, 1024).

Output array: C (6, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 6, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.004967 ms

xsmm-custom Time (libxsmm): 0.004967 ms

xsmm-custom No. of CPU cycles: 4966

CPU clock speed (GHz): 0.999866

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0049666666666666661

xsmm-custom avg execution time: 0.0049666666666666661

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 64, 'a_rows': 6, 'a_size': 72, 'a_unique': 14, 'alpha': 1.0, 'beta': 0.0, 'density': 0.8888888888888888, 'mat_file': 'data/example_mats/tri/p2/williams-shunn/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9194630872483223, 'speedup_best_over_ref': 0.9194630872483223, 'xsmm_custom_avg': 0.004966666666666666, 'xsmm_custom_best': 0.004966666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.004566666666666667, 'xsmm_reference_best': 0.004566666666666667, 'xsmm_reference_cpu_freq': 0.999866, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m460.txt...

Read matrix has 12 rows and 6 columns.

Input arrays: A (12, 6), B (6, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.005267 ms

xsmm-reference Time (libxsmm): 0.005267 ms

xsmm-reference No. of CPU cycles: 5266

CPU clock speed (GHz): 0.999873

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0052666666666666669

xsmm-reference avg execution time: 0.0052666666666666669

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 176985663 cleaned_data/example_mats/tri/p2/williams-shunn/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p2/williams-shunn/m460.txt...

Read matrix has 12 rows and 6 columns.

Input arrays: A (12, 6), B (6, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 6

lda= 1024, ldb= 6, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.006000 ms

xsmm-custom Time (libxsmm): 0.006000 ms

xsmm-custom No. of CPU cycles: 6000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0060000000000000001

xsmm-custom avg execution time: 0.0060000000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 6, 'a_nonzero': 64, 'a_rows': 12, 'a_size': 72, 'a_unique': 14, 'alpha': 1.0, 'beta': 0.0, 'density': 0.8888888888888888, 'mat_file': 'data/example_mats/tri/p2/williams-shunn/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8777777777777778, 'speedup_best_over_ref': 0.8777777777777778, 'xsmm_custom_avg': 0.006, 'xsmm_custom_best': 0.006, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.005266666666666667, 'xsmm_reference_best': 0.005266666666666667, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m0.txt...

Read matrix has 12 rows and 10 columns.

Input arrays: A (12, 10), B (10, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.006633 ms

xsmm-reference Time (libxsmm): 0.006633 ms

xsmm-reference No. of CPU cycles: 6633

CPU clock speed (GHz): 0.999950

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.006633333333333334

xsmm-reference avg execution time: 0.006633333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 724375753 cleaned_data/example_mats/tri/p3/williams-shunn/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m0.txt...

Read matrix has 12 rows and 10 columns.

Input arrays: A (12, 10), B (10, 1024).

Output array: C (12, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 12, k= 10

lda= 1024, ldb= 10, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.006767 ms

xsmm-custom Time (libxsmm): 0.006767 ms

xsmm-custom No. of CPU cycles: 6766

CPU clock speed (GHz): 0.999901

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0067666666666666674

xsmm-custom avg execution time: 0.0067666666666666674

Freeing A

Freeing B

Freeing C

{'a_cols': 10, 'a_nonzero': 120, 'a_rows': 12, 'a_size': 120, 'a_unique': 20, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p3/williams-shunn/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9802955665024631, 'speedup_best_over_ref': 0.9802955665024631, 'xsmm_custom_avg': 0.006766666666666667, 'xsmm_custom_best': 0.006766666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.006633333333333334, 'xsmm_reference_best': 0.006633333333333334, 'xsmm_reference_cpu_freq': 0.999901, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m3.txt...

Read matrix has 10 rows and 12 columns.

Input arrays: A (10, 12), B (12, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.006400 ms

xsmm-reference Time (libxsmm): 0.006433 ms

xsmm-reference No. of CPU cycles: 6433

CPU clock speed (GHz): 0.999948

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0064000000000000003

xsmm-reference avg execution time: 0.0064000000000000003

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1770665454 cleaned_data/example_mats/tri/p3/williams-shunn/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m3.txt...

Read matrix has 10 rows and 12 columns.

Input arrays: A (10, 12), B (12, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 10, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.007567 ms

xsmm-custom Time (libxsmm): 0.007567 ms

xsmm-custom No. of CPU cycles: 7566

CPU clock speed (GHz): 0.999912

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0075666666666666669

xsmm-custom avg execution time: 0.0075666666666666669

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 120, 'a_rows': 10, 'a_size': 120, 'a_unique': 40, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p3/williams-shunn/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8458149779735683, 'speedup_best_over_ref': 0.8458149779735683, 'xsmm_custom_avg': 0.007566666666666667, 'xsmm_custom_best': 0.007566666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0064, 'xsmm_reference_best': 0.0064, 'xsmm_reference_cpu_freq': 0.999912, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m6.txt...

Read matrix has 20 rows and 12 columns.

Input arrays: A (20, 12), B (12, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.019367 ms

xsmm-reference Time (libxsmm): 0.019367 ms

xsmm-reference No. of CPU cycles: 19366

CPU clock speed (GHz): 0.999966

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.019366666666666664

xsmm-reference avg execution time: 0.019366666666666664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 517630746 cleaned_data/example_mats/tri/p3/williams-shunn/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m6.txt...

Read matrix has 20 rows and 12 columns.

Input arrays: A (20, 12), B (12, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 20, k= 12

lda= 1024, ldb= 12, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.020300 ms

xsmm-custom Time (libxsmm): 0.020267 ms

xsmm-custom No. of CPU cycles: 20266

CPU clock speed (GHz): 0.999967

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.020299999999999999

xsmm-custom avg execution time: 0.020299999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 12, 'a_nonzero': 160, 'a_rows': 20, 'a_size': 240, 'a_unique': 20, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p3/williams-shunn/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9540229885057471, 'speedup_best_over_ref': 0.9540229885057471, 'xsmm_custom_avg': 0.0203, 'xsmm_custom_best': 0.0203, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.019366666666666664, 'xsmm_reference_best': 0.019366666666666664, 'xsmm_reference_cpu_freq': 0.999967, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m132.txt...

Read matrix has 10 rows and 20 columns.

Input arrays: A (10, 20), B (20, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.010800 ms

xsmm-reference Time (libxsmm): 0.010800 ms

xsmm-reference No. of CPU cycles: 10800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.010800000000000001

xsmm-reference avg execution time: 0.010800000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 843608734 cleaned_data/example_mats/tri/p3/williams-shunn/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m132.txt...

Read matrix has 10 rows and 20 columns.

Input arrays: A (10, 20), B (20, 1024).

Output array: C (10, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 10, k= 20

lda= 1024, ldb= 20, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.011500 ms

xsmm-custom Time (libxsmm): 0.011500 ms

xsmm-custom No. of CPU cycles: 11500

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0115

xsmm-custom avg execution time: 0.0115

Freeing A

Freeing B

Freeing C

{'a_cols': 20, 'a_nonzero': 192, 'a_rows': 10, 'a_size': 200, 'a_unique': 48, 'alpha': 1.0, 'beta': 0.0, 'density': 0.96, 'mat_file': 'data/example_mats/tri/p3/williams-shunn/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9391304347826087, 'speedup_best_over_ref': 0.9391304347826087, 'xsmm_custom_avg': 0.0115, 'xsmm_custom_best': 0.0115, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0108, 'xsmm_reference_best': 0.0108, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m460.txt...

Read matrix has 20 rows and 10 columns.

Input arrays: A (20, 10), B (10, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.025300 ms

xsmm-reference Time (libxsmm): 0.025300 ms

xsmm-reference No. of CPU cycles: 25300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0253

xsmm-reference avg execution time: 0.0253

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 409066957 cleaned_data/example_mats/tri/p3/williams-shunn/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p3/williams-shunn/m460.txt...

Read matrix has 20 rows and 10 columns.

Input arrays: A (20, 10), B (10, 1024).

Output array: C (20, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 20, k= 10

lda= 1024, ldb= 10, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.027633 ms

xsmm-custom Time (libxsmm): 0.027633 ms

xsmm-custom No. of CPU cycles: 27633

CPU clock speed (GHz): 0.999988

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.027633333333333333

xsmm-custom avg execution time: 0.027633333333333333

Freeing A

Freeing B

Freeing C

{'a_cols': 10, 'a_nonzero': 192, 'a_rows': 20, 'a_size': 200, 'a_unique': 48, 'alpha': 1.0, 'beta': 0.0, 'density': 0.96, 'mat_file': 'data/example_mats/tri/p3/williams-shunn/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9155609167671894, 'speedup_best_over_ref': 0.9155609167671894, 'xsmm_custom_avg': 0.027633333333333333, 'xsmm_custom_best': 0.027633333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0253, 'xsmm_reference_best': 0.0253, 'xsmm_reference_cpu_freq': 0.999988, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m0.txt...

Read matrix has 15 rows and 15 columns.

Input arrays: A (15, 15), B (15, 1024).

Output array: C (15, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.018200 ms

xsmm-reference Time (libxsmm): 0.018200 ms

xsmm-reference No. of CPU cycles: 18200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.018200000000000001

xsmm-reference avg execution time: 0.018200000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1471272021 cleaned_data/example_mats/tri/p4/williams-shunn/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m0.txt...

Read matrix has 15 rows and 15 columns.

Input arrays: A (15, 15), B (15, 1024).

Output array: C (15, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 15, k= 15

lda= 1024, ldb= 15, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.019167 ms

xsmm-custom Time (libxsmm): 0.019133 ms

xsmm-custom No. of CPU cycles: 19133

CPU clock speed (GHz): 0.999983

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.019166666666666665

xsmm-custom avg execution time: 0.019166666666666665

Freeing A

Freeing B

Freeing C

{'a_cols': 15, 'a_nonzero': 225, 'a_rows': 15, 'a_size': 225, 'a_unique': 39, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p4/williams-shunn/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9495652173913045, 'speedup_best_over_ref': 0.9495652173913045, 'xsmm_custom_avg': 0.019166666666666665, 'xsmm_custom_best': 0.019166666666666665, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0182, 'xsmm_reference_best': 0.0182, 'xsmm_reference_cpu_freq': 0.999983, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m3.txt...

Read matrix has 15 rows and 15 columns.

Input arrays: A (15, 15), B (15, 1024).

Output array: C (15, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.017633 ms

xsmm-reference Time (libxsmm): 0.017633 ms

xsmm-reference No. of CPU cycles: 17633

CPU clock speed (GHz): 0.999981

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.017633333333333334

xsmm-reference avg execution time: 0.017633333333333334

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 977721638 cleaned_data/example_mats/tri/p4/williams-shunn/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m3.txt...

Read matrix has 15 rows and 15 columns.

Input arrays: A (15, 15), B (15, 1024).

Output array: C (15, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 15, k= 15

lda= 1024, ldb= 15, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.019600 ms

xsmm-custom Time (libxsmm): 0.019567 ms

xsmm-custom No. of CPU cycles: 19566

CPU clock speed (GHz): 0.999966

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.019599999999999999

xsmm-custom avg execution time: 0.019599999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 15, 'a_nonzero': 225, 'a_rows': 15, 'a_size': 225, 'a_unique': 78, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p4/williams-shunn/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8996598639455783, 'speedup_best_over_ref': 0.8996598639455783, 'xsmm_custom_avg': 0.0196, 'xsmm_custom_best': 0.0196, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.017633333333333334, 'xsmm_reference_best': 0.017633333333333334, 'xsmm_reference_cpu_freq': 0.999966, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m6.txt...

Read matrix has 30 rows and 15 columns.

Input arrays: A (30, 15), B (15, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.042533 ms

xsmm-reference Time (libxsmm): 0.042533 ms

xsmm-reference No. of CPU cycles: 42533

CPU clock speed (GHz): 0.999992

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.042533333333333333

xsmm-reference avg execution time: 0.042533333333333333

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 2018134219 cleaned_data/example_mats/tri/p4/williams-shunn/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m6.txt...

Read matrix has 30 rows and 15 columns.

Input arrays: A (30, 15), B (15, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 30, k= 15

lda= 1024, ldb= 15, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.049433 ms

xsmm-custom Time (libxsmm): 0.049433 ms

xsmm-custom No. of CPU cycles: 49433

CPU clock speed (GHz): 0.999993

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.049433333333333336

xsmm-custom avg execution time: 0.049433333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 15, 'a_nonzero': 300, 'a_rows': 30, 'a_size': 450, 'a_unique': 39, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p4/williams-shunn/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8604180714767363, 'speedup_best_over_ref': 0.8604180714767363, 'xsmm_custom_avg': 0.049433333333333336, 'xsmm_custom_best': 0.049433333333333336, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.04253333333333333, 'xsmm_reference_best': 0.04253333333333333, 'xsmm_reference_cpu_freq': 0.999993, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m132.txt...

Read matrix has 15 rows and 30 columns.

Input arrays: A (15, 30), B (30, 1024).

Output array: C (15, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.026900 ms

xsmm-reference Time (libxsmm): 0.026900 ms

xsmm-reference No. of CPU cycles: 26900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0269

xsmm-reference avg execution time: 0.0269

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1049333347 cleaned_data/example_mats/tri/p4/williams-shunn/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m132.txt...

Read matrix has 15 rows and 30 columns.

Input arrays: A (15, 30), B (30, 1024).

Output array: C (15, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 15, k= 30

lda= 1024, ldb= 30, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.032167 ms

xsmm-custom Time (libxsmm): 0.032167 ms

xsmm-custom No. of CPU cycles: 32166

CPU clock speed (GHz): 0.999979

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.032166666666666663

xsmm-custom avg execution time: 0.032166666666666663

Freeing A

Freeing B

Freeing C

{'a_cols': 30, 'a_nonzero': 432, 'a_rows': 15, 'a_size': 450, 'a_unique': 108, 'alpha': 1.0, 'beta': 0.0, 'density': 0.96, 'mat_file': 'data/example_mats/tri/p4/williams-shunn/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.8362694300518135, 'speedup_best_over_ref': 0.8362694300518135, 'xsmm_custom_avg': 0.03216666666666666, 'xsmm_custom_best': 0.03216666666666666, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0269, 'xsmm_reference_best': 0.0269, 'xsmm_reference_cpu_freq': 0.999979, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m460.txt...

Read matrix has 30 rows and 15 columns.

Input arrays: A (30, 15), B (15, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.043367 ms

xsmm-reference Time (libxsmm): 0.043367 ms

xsmm-reference No. of CPU cycles: 43366

CPU clock speed (GHz): 0.999985

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.043366666666666664

xsmm-reference avg execution time: 0.043366666666666664

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 561439955 cleaned_data/example_mats/tri/p4/williams-shunn/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p4/williams-shunn/m460.txt...

Read matrix has 30 rows and 15 columns.

Input arrays: A (30, 15), B (15, 1024).

Output array: C (30, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 30, k= 15

lda= 1024, ldb= 15, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.045767 ms

xsmm-custom Time (libxsmm): 0.045767 ms

xsmm-custom No. of CPU cycles: 45766

CPU clock speed (GHz): 0.999985

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.045766666666666664

xsmm-custom avg execution time: 0.045766666666666664

Freeing A

Freeing B

Freeing C

{'a_cols': 15, 'a_nonzero': 432, 'a_rows': 30, 'a_size': 450, 'a_unique': 108, 'alpha': 1.0, 'beta': 0.0, 'density': 0.96, 'mat_file': 'data/example_mats/tri/p4/williams-shunn/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9475600873998543, 'speedup_best_over_ref': 0.9475600873998543, 'xsmm_custom_avg': 0.045766666666666664, 'xsmm_custom_best': 0.045766666666666664, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.043366666666666664, 'xsmm_reference_best': 0.043366666666666664, 'xsmm_reference_cpu_freq': 0.999985, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m0.txt...

Read matrix has 18 rows and 21 columns.

Input arrays: A (18, 21), B (21, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.024833 ms

xsmm-reference Time (libxsmm): 0.024833 ms

xsmm-reference No. of CPU cycles: 24833

CPU clock speed (GHz): 0.999987

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.024833333333333332

xsmm-reference avg execution time: 0.024833333333333332

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1490274828 cleaned_data/example_mats/tri/p5/williams-shunn/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m0.txt...

Read matrix has 18 rows and 21 columns.

Input arrays: A (18, 21), B (21, 1024).

Output array: C (18, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 18, k= 21

lda= 1024, ldb= 21, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.026200 ms

xsmm-custom Time (libxsmm): 0.026200 ms

xsmm-custom No. of CPU cycles: 26200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.026200000000000001

xsmm-custom avg execution time: 0.026200000000000001

Freeing A

Freeing B

Freeing C

{'a_cols': 21, 'a_nonzero': 378, 'a_rows': 18, 'a_size': 378, 'a_unique': 63, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p5/williams-shunn/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9478371501272264, 'speedup_best_over_ref': 0.9478371501272264, 'xsmm_custom_avg': 0.0262, 'xsmm_custom_best': 0.0262, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.024833333333333332, 'xsmm_reference_best': 0.024833333333333332, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m3.txt...

Read matrix has 21 rows and 18 columns.

Input arrays: A (21, 18), B (18, 1024).

Output array: C (21, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.032700 ms

xsmm-reference Time (libxsmm): 0.032700 ms

xsmm-reference No. of CPU cycles: 32700

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0327

xsmm-reference avg execution time: 0.0327

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1541305473 cleaned_data/example_mats/tri/p5/williams-shunn/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m3.txt...

Read matrix has 21 rows and 18 columns.

Input arrays: A (21, 18), B (18, 1024).

Output array: C (21, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 21, k= 18

lda= 1024, ldb= 18, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.033000 ms

xsmm-custom Time (libxsmm): 0.033000 ms

xsmm-custom No. of CPU cycles: 33000

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.033000000000000002

xsmm-custom avg execution time: 0.033000000000000002

Freeing A

Freeing B

Freeing C

{'a_cols': 18, 'a_nonzero': 378, 'a_rows': 21, 'a_size': 378, 'a_unique': 126, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p5/williams-shunn/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9909090909090909, 'speedup_best_over_ref': 0.9909090909090909, 'xsmm_custom_avg': 0.033, 'xsmm_custom_best': 0.033, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0327, 'xsmm_reference_best': 0.0327, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m6.txt...

Read matrix has 42 rows and 18 columns.

Input arrays: A (42, 18), B (18, 1024).

Output array: C (42, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.071233 ms

xsmm-reference Time (libxsmm): 0.071233 ms

xsmm-reference No. of CPU cycles: 71233

CPU clock speed (GHz): 0.999995

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.071233333333333329

xsmm-reference avg execution time: 0.071233333333333329

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 96590692 cleaned_data/example_mats/tri/p5/williams-shunn/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m6.txt...

Read matrix has 42 rows and 18 columns.

Input arrays: A (42, 18), B (18, 1024).

Output array: C (42, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 42, k= 18

lda= 1024, ldb= 18, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.077100 ms

xsmm-custom Time (libxsmm): 0.077100 ms

xsmm-custom No. of CPU cycles: 77100

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.077100000000000002

xsmm-custom avg execution time: 0.077100000000000002

Freeing A

Freeing B

Freeing C

{'a_cols': 18, 'a_nonzero': 504, 'a_rows': 42, 'a_size': 756, 'a_unique': 63, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p5/williams-shunn/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9239083441418071, 'speedup_best_over_ref': 0.9239083441418071, 'xsmm_custom_avg': 0.0771, 'xsmm_custom_best': 0.0771, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.07123333333333333, 'xsmm_reference_best': 0.07123333333333333, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m132.txt...

Read matrix has 21 rows and 42 columns.

Input arrays: A (21, 42), B (42, 1024).

Output array: C (21, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.054133 ms

xsmm-reference Time (libxsmm): 0.054133 ms

xsmm-reference No. of CPU cycles: 54133

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.054133333333333339

xsmm-reference avg execution time: 0.054133333333333339

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 335089008 cleaned_data/example_mats/tri/p5/williams-shunn/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m132.txt...

Read matrix has 21 rows and 42 columns.

Input arrays: A (21, 42), B (42, 1024).

Output array: C (21, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 21, k= 42

lda= 1024, ldb= 42, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.059300 ms

xsmm-custom Time (libxsmm): 0.059300 ms

xsmm-custom No. of CPU cycles: 59300

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.059299999999999999

xsmm-custom avg execution time: 0.059299999999999999

Freeing A

Freeing B

Freeing C

{'a_cols': 42, 'a_nonzero': 864, 'a_rows': 21, 'a_size': 882, 'a_unique': 216, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9795918367346939, 'mat_file': 'data/example_mats/tri/p5/williams-shunn/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9128724002248455, 'speedup_best_over_ref': 0.9128724002248455, 'xsmm_custom_avg': 0.0593, 'xsmm_custom_best': 0.0593, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.05413333333333334, 'xsmm_reference_best': 0.05413333333333334, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m460.txt...

Read matrix has 42 rows and 21 columns.

Input arrays: A (42, 21), B (21, 1024).

Output array: C (42, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.076200 ms

xsmm-reference Time (libxsmm): 0.076200 ms

xsmm-reference No. of CPU cycles: 76200

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.076200000000000004

xsmm-reference avg execution time: 0.076200000000000004

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1951298738 cleaned_data/example_mats/tri/p5/williams-shunn/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p5/williams-shunn/m460.txt...

Read matrix has 42 rows and 21 columns.

Input arrays: A (42, 21), B (21, 1024).

Output array: C (42, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 42, k= 21

lda= 1024, ldb= 21, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.083033 ms

xsmm-custom Time (libxsmm): 0.083033 ms

xsmm-custom No. of CPU cycles: 83033

CPU clock speed (GHz): 0.999996

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.083033333333333334

xsmm-custom avg execution time: 0.083033333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 21, 'a_nonzero': 864, 'a_rows': 42, 'a_size': 882, 'a_unique': 216, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9795918367346939, 'mat_file': 'data/example_mats/tri/p5/williams-shunn/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9177037334403855, 'speedup_best_over_ref': 0.9177037334403855, 'xsmm_custom_avg': 0.08303333333333333, 'xsmm_custom_best': 0.08303333333333333, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0762, 'xsmm_reference_best': 0.0762, 'xsmm_reference_cpu_freq': 0.999996, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m0.txt...

Read matrix has 21 rows and 28 columns.

Input arrays: A (21, 28), B (28, 1024).

Output array: C (21, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.038800 ms

xsmm-reference Time (libxsmm): 0.038767 ms

xsmm-reference No. of CPU cycles: 38766

CPU clock speed (GHz): 0.999983

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.038799999999999994

xsmm-reference avg execution time: 0.038799999999999994

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 690948302 cleaned_data/example_mats/tri/p6/williams-shunn/m0.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m0.txt...

Read matrix has 21 rows and 28 columns.

Input arrays: A (21, 28), B (28, 1024).

Output array: C (21, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 21, k= 28

lda= 1024, ldb= 28, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.041900 ms

xsmm-custom Time (libxsmm): 0.041900 ms

xsmm-custom No. of CPU cycles: 41900

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.0419

xsmm-custom avg execution time: 0.0419

Freeing A

Freeing B

Freeing C

{'a_cols': 28, 'a_nonzero': 588, 'a_rows': 21, 'a_size': 588, 'a_unique': 100, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p6/williams-shunn/m0.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9260143198090691, 'speedup_best_over_ref': 0.9260143198090691, 'xsmm_custom_avg': 0.0419, 'xsmm_custom_best': 0.0419, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.038799999999999994, 'xsmm_reference_best': 0.038799999999999994, 'xsmm_reference_cpu_freq': 1.0, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m3.txt...

Read matrix has 28 rows and 21 columns.

Input arrays: A (28, 21), B (21, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.048567 ms

xsmm-reference Time (libxsmm): 0.048567 ms

xsmm-reference No. of CPU cycles: 48566

CPU clock speed (GHz): 0.999986

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.048566666666666668

xsmm-reference avg execution time: 0.048566666666666668

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1231646751 cleaned_data/example_mats/tri/p6/williams-shunn/m3.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m3.txt...

Read matrix has 28 rows and 21 columns.

Input arrays: A (28, 21), B (21, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 28, k= 21

lda= 1024, ldb= 21, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.048633 ms

xsmm-custom Time (libxsmm): 0.048633 ms

xsmm-custom No. of CPU cycles: 48633

CPU clock speed (GHz): 0.999993

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.048633333333333334

xsmm-custom avg execution time: 0.048633333333333334

Freeing A

Freeing B

Freeing C

{'a_cols': 21, 'a_nonzero': 588, 'a_rows': 28, 'a_size': 588, 'a_unique': 200, 'alpha': 1.0, 'beta': 0.0, 'density': 1.0, 'mat_file': 'data/example_mats/tri/p6/williams-shunn/m3.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9986291980808774, 'speedup_best_over_ref': 0.9986291980808774, 'xsmm_custom_avg': 0.048633333333333334, 'xsmm_custom_best': 0.048633333333333334, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.04856666666666667, 'xsmm_reference_best': 0.04856666666666667, 'xsmm_reference_cpu_freq': 0.999993, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m6.txt...

Read matrix has 56 rows and 21 columns.

Input arrays: A (56, 21), B (21, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.107567 ms

xsmm-reference Time (libxsmm): 0.107567 ms

xsmm-reference No. of CPU cycles: 107566

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.10756666666666666

xsmm-reference avg execution time: 0.10756666666666666

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1989391997 cleaned_data/example_mats/tri/p6/williams-shunn/m6.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m6.txt...

Read matrix has 56 rows and 21 columns.

Input arrays: A (56, 21), B (21, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 56, k= 21

lda= 1024, ldb= 21, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 56

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.116367 ms

xsmm-custom Time (libxsmm): 0.116367 ms

xsmm-custom No. of CPU cycles: 116366

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.11636666666666667

xsmm-custom avg execution time: 0.11636666666666667

Freeing A

Freeing B

Freeing C

{'a_cols': 21, 'a_nonzero': 784, 'a_rows': 56, 'a_size': 1176, 'a_unique': 100, 'alpha': 1.0, 'beta': 0.0, 'density': 0.6666666666666666, 'mat_file': 'data/example_mats/tri/p6/williams-shunn/m6.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9243769693497563, 'speedup_best_over_ref': 0.9243769693497563, 'xsmm_custom_avg': 0.11636666666666667, 'xsmm_custom_best': 0.11636666666666667, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.10756666666666666, 'xsmm_reference_best': 0.10756666666666666, 'xsmm_reference_cpu_freq': 0.999994, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m132.txt...

Read matrix has 28 rows and 56 columns.

Input arrays: A (28, 56), B (56, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.097400 ms

xsmm-reference Time (libxsmm): 0.097400 ms

xsmm-reference No. of CPU cycles: 97400

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.0974

xsmm-reference avg execution time: 0.0974

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 1524001192 cleaned_data/example_mats/tri/p6/williams-shunn/m132.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m132.txt...

Read matrix has 28 rows and 56 columns.

Input arrays: A (28, 56), B (56, 1024).

Output array: C (28, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 28, k= 56

lda= 1024, ldb= 56, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.105867 ms

xsmm-custom Time (libxsmm): 0.105867 ms

xsmm-custom No. of CPU cycles: 105866

CPU clock speed (GHz): 0.999994

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.10586666666666668

xsmm-custom avg execution time: 0.10586666666666668

Freeing A

Freeing B

Freeing C

{'a_cols': 56, 'a_nonzero': 1536, 'a_rows': 28, 'a_size': 1568, 'a_unique': 384, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9795918367346939, 'mat_file': 'data/example_mats/tri/p6/williams-shunn/m132.txt', 'size_n': 1024, 'speedup_avg_over_ref': 0.9200251889168765, 'speedup_best_over_ref': 0.9200251889168765, 'xsmm_custom_avg': 0.10586666666666668, 'xsmm_custom_best': 0.10586666666666668, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.0974, 'xsmm_reference_best': 0.0974, 'xsmm_reference_cpu_freq': 0.999994, 'xsmm_reference_kernel_type': 'dense'}
run 0

Preparing ref

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m460.txt...

Read matrix has 56 rows and 28 columns.

Input arrays: A (56, 28), B (28, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

xsmm-reference kernel type: dense

Benchmarking ref

xsmm-reference Time (gettimeofday): 0.139800 ms

xsmm-reference Time (libxsmm): 0.139800 ms

xsmm-reference No. of CPU cycles: 139800

CPU clock speed (GHz): 1.000000

Done.

---------------------------------------------------------------

xsmm-reference best execution time: 0.13980000000000001

xsmm-reference avg execution time: 0.13980000000000001

Freeing A ref

Freeing B ref

Freeing C ref

about to run "sudo nice -n -20 bin/benchmark_xsmm_custom 1024 192184181 cleaned_data/example_mats/tri/p6/williams-shunn/m460.txt"

Preparing

alpha = 1.000000, beta = 0.000000

Loading matrix from path cleaned_data/example_mats/tri/p6/williams-shunn/m460.txt...

Read matrix has 56 rows and 28 columns.

Input arrays: A (56, 28), B (28, 1024).

Output array: C (56, 1024).

Array B width (N): 1024

Randomly generating B matrix...

Running XSMM Reference MM...

Checking matrices for AMX

m= 8, n= 56, k= 28

lda= 1024, ldb= 28, ldc= 1024

Byte per val is 8

AMX vec length is 8

M is vec length divisible at 8

N is vec length divisible at 56

A flags are good

Prepared

xsmm-custom kernel type: dense

Benchmarking

xsmm-custom Time (gettimeofday): 0.139133 ms

xsmm-custom Time (libxsmm): 0.139133 ms

xsmm-custom No. of CPU cycles: 139133

CPU clock speed (GHz): 0.999998

Done.

---------------------------------------------------------------

xsmm-custom best execution time: 0.13913333333333336

xsmm-custom avg execution time: 0.13913333333333336

Freeing A

Freeing B

Freeing C

{'a_cols': 28, 'a_nonzero': 1536, 'a_rows': 56, 'a_size': 1568, 'a_unique': 384, 'alpha': 1.0, 'beta': 0.0, 'density': 0.9795918367346939, 'mat_file': 'data/example_mats/tri/p6/williams-shunn/m460.txt', 'size_n': 1024, 'speedup_avg_over_ref': 1.0047915668423573, 'speedup_best_over_ref': 1.0047915668423573, 'xsmm_custom_avg': 0.13913333333333336, 'xsmm_custom_best': 0.13913333333333336, 'xsmm_custom_kernel_type': 'dense', 'xsmm_reference_avg': 0.1398, 'xsmm_reference_best': 0.1398, 'xsmm_reference_cpu_freq': 0.999998, 'xsmm_reference_kernel_type': 'dense'}
Average speedup (best) of custom over reference 0.9717629176401167
Average speedup (iqr avg) of custom over reference 0.9717629176401167
